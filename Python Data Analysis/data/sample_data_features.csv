problem_id,source,code,cleaned_code,num_chars,num_lines,avg_line_length,max_line_length,num_digits,num_empty_lines,num_whitespace,num_indents,num_method_declarations,num_break,num_continue,num_with,num_assert,num_except,num_not,num_or,num_and,num_none,num_in,num_yield,num_pass,num_raise,num_for,num_while,num_comparators,num_local_vars,avg_name_length,max_name_length,num_function_calls,num_loops,num_if_statements,num_return_statements,num_exceptions_raised,num_list_comprehensions,num_dict_comprehensions,num_set_comprehensions,num_imported_modules,num_list_operations,num_dict_operations,num_set_operations,num_lambda_functions,num_generator_expressions,num_attributes_accessed,cyclomatic_complexity,halstead_operators,halstead_operands,halstead_length,halstead_volume,halstead_difficulty,halstead_effort,halstead_time,halstead_bugs
HumanEval/0,human,"    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
","for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            distance = abs(elem - elem2)
            if distance < threshold:
                return True

return False",223,8,30.857142857142858,42,4,1,100,80,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,2,1,8.0,8,3,2,2,2,0,0,0,0,0,0,0,0,0,0,0,5,3,6,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938
HumanEval/1,human,"    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","result = []
current_string = []
current_depth = 0

for c in paren_string:
    if c == '(':
        current_depth += 1
        current_string.append(c)
    elif c == ')':
        current_depth -= 1
        current_string.append(c)

        if current_depth == 0:
            result.append(''.join(current_string))
            current_string.clear()

return result",362,17,24.714285714285715,50,4,3,151,128,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,3,3,11.0,14,5,1,3,1,0,0,0,0,0,2,0,0,0,0,5,5,3,6,20.264662506490406,47.548875021634686,2.5,118.87218755408671,6.604010419671484,0.01584962500721156
HumanEval/2,human,"    return number % 1.0
",return number % 1.0,19,1,19.0,19,2,0,7,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/3,human,"    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","balance = 0

for op in operations:
    balance += op
    if balance < 0:
        return True

return False",106,8,16.5,21,2,2,52,40,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,7.0,7,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,3,2,3,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725
HumanEval/4,human,"    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","mean = sum(numbers) / len(numbers)
return sum(abs(x - mean) for x in numbers) / len(numbers)",92,2,45.5,57,0,0,21,8,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,4.0,4,5,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,2,6,17.509775004326936,27.0,1.0,27.0,1.5,0.009
HumanEval/5,human,"    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","if not numbers:
    return []

result = []

for n in numbers[:-1]:
    result.append(n)
    result.append(delimeter)

result.append(numbers[-1])

return result",159,12,18.5,28,2,4,53,44,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,1,6.0,6,3,1,1,2,0,0,0,0,0,2,0,0,0,0,3,3,2,2,4.0,12.0,1.5,18.0,1.0,0.004
HumanEval/6,human,"    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def parse_paren_group(s):
    depth = 0
    max_depth = 0
    for c in s:
        if c == '(':
            depth += 1
            max_depth = max(depth, max_depth)
        else:
            depth -= 1

    return max_depth

return [parse_paren_group(x) for x in paren_string.split(' ') if x]",291,13,25.363636363636363,67,4,2,139,112,1,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,1,2,7.0,9,3,1,1,2,0,1,0,0,0,0,0,0,1,0,1,3,3,4,12.75488750216347,25.26619429851844,2.25,56.848937171666485,3.158274287314805,0.008422064766172813
HumanEval/7,human,"    return [x for x in strings if substring in x]
",return [x for x in strings if substring in x],45,1,45.0,45,0,0,13,4,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0.0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,3,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/8,human,"    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","sum_value = 0
prod_value = 1

for n in numbers:
    sum_value += n
    prod_value *= n
return sum_value, prod_value",115,7,18.166666666666668,28,2,1,45,32,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,2,9.5,10,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,3,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725
HumanEval/9,human,"    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","running_max = None
result = []

for n in numbers:
    if running_max is None:
        running_max = n
    else:
        running_max = max(running_max, n)

    result.append(running_max)

return result",200,12,21.0,41,0,3,80,64,0,0,0,0,0,0,0,1,0,2,1,0,0,0,1,0,0,2,8.5,11,2,1,1,1,0,0,0,0,0,1,0,0,0,0,1,3,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/10,human,"    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","if not string:
    return ''

beginning_of_suffix = 0

while not is_palindrome(string[beginning_of_suffix:]):
    beginning_of_suffix += 1

return string + string[:beginning_of_suffix][::-1]",190,9,30.333333333333332,54,3,3,44,32,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,1,19.0,19,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,3,3,5,16.36452797660028,36.0,2.1,75.60000000000001,4.2,0.012
HumanEval/11,human,"    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","def xor(i, j):
    if i == j:
        return '0'
    else:
        return '1'

return ''.join(xor(x, y) for x, y in zip(a, b))",126,7,20.0,47,2,1,63,48,1,0,0,0,0,0,0,3,0,0,1,0,0,0,1,0,1,0,0.0,0,3,0,1,3,0,0,0,0,0,0,0,0,1,1,1,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/12,human,"    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","if not strings:
    return None

maxlen = max(len(x) for x in strings)
for s in strings:
    if len(s) == maxlen:
        return s",130,7,20.666666666666668,37,0,1,56,40,0,0,0,0,0,0,1,2,0,1,2,0,0,0,2,0,1,1,6.0,6,3,1,2,2,0,0,0,0,0,0,0,0,0,1,0,5,2,3,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034
HumanEval/13,human,"    while b:
        a, b = b, a % b
    return a
","while b:
    a, b = b, a % b
return a",37,3,11.666666666666666,19,0,0,24,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,6.0,6,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/14,human,"    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","result = []

for i in range(len(string)):
    result.append(string[:i+1])
return result",87,5,20.75,31,1,1,26,20,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,6.0,6,3,1,0,1,0,0,0,0,0,1,0,0,0,0,1,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/15,human,"    return ' '.join([str(x) for x in range(n + 1)])
",return ' '.join([str(x) for x in range(n + 1)]),47,1,47.0,47,1,0,12,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,3,0,0,1,0,1,0,0,0,0,0,0,0,0,1,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/16,human,"    return len(set(string.lower()))
",return len(set(string.lower())),31,1,31.0,31,0,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/17,human,"    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","note_map = {'o': 4, 'o|': 2, '.|': 1}
return [note_map[x] for x in music_string.split(' ') if x]",96,2,47.5,58,3,0,23,8,0,0,0,0,0,0,2,1,0,0,1,0,0,0,1,0,0,1,8.0,8,1,0,0,1,0,1,0,0,0,0,1,0,0,0,1,3,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/18,human,"    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","times = 0

for i in range(len(string) - len(substring) + 1):
    if string[i:i+len(substring)] == substring:
        times += 1

return times",141,7,27.0,49,3,2,47,32,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,5.0,5,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,3,9,33.28421251514428,53.77443751081735,1.6666666666666667,89.62406251802892,4.9791145843349405,0.017924812503605784
HumanEval/19,human,"    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","value_map = {
    'zero': 0,
    'one': 1,
    'two': 2,
    'three': 3,
    'four': 4,
    'five': 5,
    'six': 6,
    'seven': 7,
    'eight': 8,
    'nine': 9
}
return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))",254,13,18.615384615384617,89,10,0,116,92,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,0,1,9.0,9,3,0,0,1,0,1,0,0,0,0,1,0,1,0,2,3,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/20,human,"    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","closest_pair = None
distance = None

for idx, elem in enumerate(numbers):
    for idx2, elem2 in enumerate(numbers):
        if idx != idx2:
            if distance is None:
                distance = abs(elem - elem2)
                closest_pair = tuple(sorted([elem, elem2]))
            else:
                new_distance = abs(elem - elem2)
                if new_distance < distance:
                    distance = new_distance
                    closest_pair = tuple(sorted([elem, elem2]))

return closest_pair",518,16,35.92857142857143,63,7,2,234,196,0,0,0,0,0,0,0,4,0,3,2,0,0,0,2,0,2,3,10.0,12,8,2,3,1,0,0,0,0,0,2,0,0,0,0,0,6,4,7,27.651484454403228,51.89147427955947,2.857142857142857,148.26135508445563,8.236741949136423,0.01729715809318649
HumanEval/21,human,"    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","min_number = min(numbers)
max_number = max(numbers)
return [(x - min_number) / (max_number - min_number) for x in numbers]",122,3,40.0,70,0,0,27,12,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,2,10.0,10,2,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,2,5,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813
HumanEval/22,human,"    return [x for x in values if isinstance(x, int)]
","return [x for x in values if isinstance(x, int)]",48,1,48.0,48,0,0,12,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/23,human,"    return len(string)
",return len(string),18,1,18.0,18,0,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/24,human,"    for i in reversed(range(n)):
        if n % i == 0:
            return i
","for i in reversed(range(n)):
    if n % i == 0:
        return i",64,3,20.666666666666668,28,1,0,33,24,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0.0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/25,human,"    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","import math
fact = []
i = 2
while i <= int(math.sqrt(n) + 1):
    if n % i == 0:
        fact.append(i)
        n //= i
    else:
        i += 1

if n > 1:
    fact.append(n)
return fact",186,13,14.5,33,5,1,107,84,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,3,2,2.5,4,4,1,2,1,0,0,0,0,1,1,0,0,0,0,3,4,6,7,35.161259458730164,77.70923408096293,6.0,466.2554044857776,25.903078026987643,0.025903078026987644
HumanEval/26,human,"    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","import collections
c = collections.Counter(numbers)
return [n for n in numbers if c[n] <= 1]",92,3,30.0,40,1,0,24,12,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,1,1,1.0,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,1,3,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/27,human,"    return string.swapcase()
",return string.swapcase(),24,1,24.0,24,0,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/28,human,"    return ''.join(strings)
",return ''.join(strings),23,1,23.0,23,0,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/29,human,"    return [x for x in strings if x.startswith(prefix)]
",return [x for x in strings if x.startswith(prefix)],51,1,51.0,51,0,0,11,4,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,3,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/30,human,"    return [e for e in l if e > 0]
",return [e for e in l if e > 0],30,1,30.0,30,1,0,13,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0.0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,3,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/31,human,"    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","if n < 2:
    return False
for k in range(2, n - 1):
    if n % k == 0:
        return False
return True",104,6,16.5,25,4,0,57,40,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,2,0,0.0,0,1,1,2,3,0,0,0,0,0,0,0,0,0,0,0,4,4,6,23.509775004326936,39.863137138648355,2.6666666666666665,106.3016990363956,5.905649946466422,0.013287712379549451
HumanEval/32,human,"    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","begin, end = -1., 1.
while poly(xs, begin) * poly(xs, end) > 0:
    begin *= 2.0
    end *= 2.0
while end - begin > 1e-10:
    center = (begin + end) / 2.0
    if poly(xs, center) * poly(xs, begin) > 0:
        begin = center
    else:
        end = center
return begin",269,11,23.545454545454547,46,13,0,118,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,6.5,12,4,2,1,1,0,0,0,0,0,0,0,0,0,0,0,4,6,14,68.81274391313339,138.3016990363956,4.5,622.3576456637802,34.5754247590989,0.0461005663454652
HumanEval/33,human,"    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","l = list(l)
l[::3] = sorted(l[::3])
return l",44,3,14.0,23,2,0,17,12,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,3.5,6,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/34,human,"    return sorted(list(set(l)))
",return sorted(list(set(l))),27,1,27.0,27,0,0,5,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0.0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/35,human,"    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","m = l[0]
for e in l:
    if e > m:
        m = e
return m",57,5,10.6,13,1,0,43,32,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,1.0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/36,human,"    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","ns = []
for i in range(n):
    if i % 11 == 0 or i % 13 == 0:
        ns.append(i)
s = ''.join(list(map(str, ns)))
ans = 0
for c in s:
    ans += (c == '7')
return ans",167,9,17.666666666666668,34,8,0,81,52,0,0,0,0,0,0,0,3,0,0,2,0,0,0,2,0,3,3,2.0,3,5,2,1,1,0,0,0,0,0,1,0,0,0,0,2,5,4,12,51.01955000865388,84.0,2.3333333333333335,196.0,10.88888888888889,0.028
HumanEval/37,human,"    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","evens = l[::2]
odds = l[1::2]
evens.sort()
ans = []
for e, o in zip(evens, odds):
    ans.extend([e, o])
if len(evens) > len(odds):
    ans.append(evens[-1])
return ans",168,9,17.77777777777778,29,4,0,60,44,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,1,3,4.0,5,6,1,1,1,0,0,0,0,0,2,0,0,0,0,3,3,2,3,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034
HumanEval/38,human,"    return encode_cyclic(encode_cyclic(s))
",return encode_cyclic(encode_cyclic(s)),38,1,38.0,38,0,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/39,human,"    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","import math

def is_prime(p):
    if p < 2:
        return False
    for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
        if p % k == 0:
            return False
    return True
f = [0, 1]
while True:
    f.append(f[-1] + f[-2])
    if is_prime(f[-1]):
        n -= 1
    if n == 0:
        return f[-1]",312,16,19.8,57,13,1,163,128,1,0,0,0,0,0,0,2,0,0,1,0,0,0,1,1,3,1,1.0,1,6,2,4,4,0,0,0,0,1,1,0,0,1,0,2,4,6,13,63.61549134016113,135.93368043019473,4.615384615384615,627.3862173701294,34.85478985389608,0.04531122681006491
HumanEval/40,human,"    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","for i in range(len(l)):
    for j in range(i + 1, len(l)):
        for k in range(j + 1, len(l)):
            if l[i] + l[j] + l[k] == 0:
                return True
return False",178,6,28.833333333333332,39,3,0,88,64,0,0,0,0,0,0,0,3,0,0,3,0,0,0,3,0,1,0,0.0,0,6,3,1,2,0,0,0,0,0,0,0,0,0,0,0,5,2,9,30.529325012980813,51.89147427955947,1.1111111111111112,57.65719364395497,3.203177424664165,0.01729715809318649
HumanEval/41,human,"    return n**2
",return n**2,11,1,11.0,11,1,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/42,human,"    return [(e + 1) for e in l]
",return [(e + 1) for e in l],27,1,27.0,27,1,0,11,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/43,human,"    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","for i, l1 in enumerate(l):
    for j in range(i + 1, len(l)):
        if l1 + l[j] == 0:
            return True
return False",125,5,24.2,34,4,0,61,44,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,1,0,0.0,0,3,2,1,2,0,0,0,0,0,0,0,0,0,0,0,4,2,6,17.509775004326936,27.0,1.0,27.0,1.5,0.009
HumanEval/44,human,"    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","ret = """"
while x > 0:
    ret = str(x % base) + ret
    x //= base
return ret",77,5,14.6,29,1,0,42,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3.0,3,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,4,5,19.60964047443681,38.03910001730775,3.2,121.72512005538482,6.762506669743601,0.012679700005769252
HumanEval/45,human,"    return a * h / 2.0
",return a * h / 2.0,18,1,18.0,18,2,0,9,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/46,human,"    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","results = [0, 0, 2, 0]
if n < 4:
    return results[n]

for _ in range(4, n + 1):
    results.append(results[-1] + results[-2] + results[-3] + results[-4])
    results.pop(0)

return results[-1]",194,9,26.571428571428573,73,13,2,62,40,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,7.0,7,3,1,1,2,0,0,0,0,0,1,0,0,0,0,2,3,3,11,42.808635307173745,95.18387305144009,2.0454545454545454,194.69428578703653,10.816349210390918,0.03172795768381336
HumanEval/47,human,"    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","l = sorted(l)
if len(l) % 2 == 1:
    return l[len(l) // 2]
else:
    return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0",120,5,23.2,54,8,0,49,28,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1.0,1,5,0,1,2,0,0,0,0,0,0,0,0,0,0,0,2,6,11,53.563522809337215,98.09910819000817,4.363636363636363,428.06883573821744,23.781601985456525,0.03269970273000272
HumanEval/48,human,"    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","for i in range(len(text)):
    if text[i] != text[len(text) - 1 - i]:
        return False
return True",102,4,24.75,42,1,0,40,28,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0.0,0,3,1,1,2,0,0,0,0,0,0,0,0,0,0,0,3,2,6,17.509775004326936,27.0,1.0,27.0,1.5,0.009
HumanEval/49,human,"    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","ret = 1
for i in range(n):
    ret = (2 * ret) % p
return ret",61,4,14.5,23,2,0,32,20,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,3.0,3,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/50,human,"    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",77,1,77.0,77,3,0,17,4,0,0,0,0,0,0,0,4,0,0,1,0,0,0,1,0,0,0,0.0,0,5,0,0,1,0,1,0,0,0,0,0,0,0,0,1,2,3,8,28.75488750216347,41.51317942364757,1.5,62.26976913547136,3.4594316186372978,0.01383772647454919
HumanEval/51,human,"    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])",79,1,79.0,79,0,0,18,4,0,0,0,0,0,0,1,1,0,0,2,0,0,0,1,0,0,0,0.0,0,2,0,0,1,0,1,0,0,0,1,0,0,0,0,2,3,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/52,human,"    for e in l:
        if e >= t:
            return False
    return True
","for e in l:
    if e >= t:
        return False
return True",59,4,14.0,20,0,0,36,28,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0.0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,3,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/53,human,"    return x + y
",return x + y,12,1,12.0,12,0,0,7,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/54,human,"    return set(s0) == set(s1)
",return set(s0) == set(s1),25,1,25.0,25,2,0,7,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0.0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/55,human,"    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","if n == 0:
    return 0
if n == 1:
    return 1
return fib(n - 1) + fib(n - 2)",78,5,14.8,30,6,0,43,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0.0,0,2,0,2,3,0,0,0,0,0,0,0,0,0,0,0,3,3,6,20.264662506490406,47.548875021634686,2.5,118.87218755408671,6.604010419671484,0.01584962500721156
HumanEval/56,human,"    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","depth = 0
for b in brackets:
    if b == ""<"":
        depth += 1
    else:
        depth -= 1
    if depth < 0:
        return False
return depth == 0",150,9,15.777777777777779,20,5,0,91,72,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,4,1,5.0,5,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,4,4,5,19.60964047443681,47.548875021634686,4.0,190.19550008653874,10.566416671474375,0.01584962500721156
HumanEval/57,human,"    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","if l == sorted(l) or l == sorted(l, reverse=True):
    return True
return False",79,3,25.666666666666668,50,0,0,26,16,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,2,0,0.0,0,2,0,1,2,0,0,0,0,0,0,0,0,0,0,0,3,2,5,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813
HumanEval/58,human,"    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","ret = set()
for e1 in l1:
    for e2 in l2:
        if e1 == e2:
            ret.add(e1)
return sorted(list(ret))",113,6,18.0,24,7,0,60,48,0,0,0,0,0,0,0,3,0,0,2,0,0,0,2,0,1,1,3.0,3,4,2,1,1,0,0,0,0,0,0,0,0,0,0,1,4,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/59,human,"    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def is_prime(k):
    if k < 2:
        return False
    for i in range(2, k - 1):
        if k % i == 0:
            return False
    return True
largest = 1
for j in range(2, n + 1):
    if n % j == 0 and is_prime(j):
        largest = max(largest, j)
return largest",267,12,21.333333333333332,34,8,0,137,100,1,0,0,0,0,0,0,2,1,0,2,0,0,0,2,0,3,1,7.0,7,4,2,3,4,0,0,0,0,0,0,0,0,1,0,0,4,6,13,63.61549134016113,101.95026032264605,3.6923076923076925,376.43173042207775,20.912873912337652,0.03398342010754868
HumanEval/60,human,"    return sum(range(n + 1))
",return sum(range(n + 1)),24,1,24.0,24,1,0,7,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/61,human,"    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","depth = 0
for b in brackets:
    if b == ""("":
        depth += 1
    else:
        depth -= 1
    if depth < 0:
        return False
return depth == 0",150,9,15.777777777777779,20,5,0,91,72,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,3,1,5.0,5,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,4,4,5,19.60964047443681,47.548875021634686,4.0,190.19550008653874,10.566416671474375,0.01584962500721156
HumanEval/62,human,"    return [(i * x) for i, x in enumerate(xs)][1:]
","return [(i * x) for i, x in enumerate(xs)][1:]",46,1,46.0,46,1,0,12,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/63,human,"    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","if n == 0:
    return 0
if n == 1:
    return 0
if n == 2:
    return 1
return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)",124,7,16.857142857142858,52,9,0,63,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0.0,0,3,0,3,4,0,0,0,0,0,0,0,0,0,0,0,4,3,9,33.28421251514428,86.03910001730776,2.6666666666666665,229.43760004615402,12.746533335897446,0.028679700005769252
HumanEval/64,human,"    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","vowels = ""aeiouAEIOU""
n_vowels = sum(c in vowels for c in s)
if s[-1] == 'y' or s[-1] == 'Y':
    n_vowels += 1
return n_vowels",127,5,24.6,38,3,0,44,24,0,0,0,0,0,0,0,2,0,0,2,0,0,0,1,0,2,2,7.0,8,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,4,5,10,44.82892142331043,74.23092131656186,3.0,222.69276394968557,12.371820219426976,0.024743640438853954
HumanEval/65,human,"    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","s = str(x)
if shift > len(s):
    return s[::-1]
else:
    return s[len(s) - shift:] + s[:len(s) - shift]",105,5,20.2,50,1,0,41,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1.0,1,4,0,1,2,0,0,0,0,0,0,0,0,0,0,0,2,4,7,27.651484454403228,48.43204266092217,2.5714285714285716,124.53953827094274,6.918863237274596,0.016144014220307392
HumanEval/66,human,"    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","if s == """": return 0
return sum(ord(char) if char.isupper() else 0 for char in s)",81,2,40.0,60,2,0,22,8,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,1,0,0.0,0,3,0,1,2,0,0,0,0,0,0,0,0,0,1,1,4,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/67,human,"    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","lis = list()
for i in s.split(' '):
    if i.isdigit():
        lis.append(int(i))
return n - sum(lis)",102,5,19.6,26,0,0,42,32,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,3.0,3,6,1,1,1,0,0,0,0,0,0,0,0,0,0,3,3,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/68,human,"    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","if(len(arr) == 0): return []
evens = list(filter(lambda x: x%2 == 0, arr))
if(evens == []): return []
return [min(evens), arr.index(min(evens))]",144,4,35.25,45,3,0,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,5.0,5,6,0,2,3,0,0,0,0,0,4,0,0,1,0,1,3,2,7,21.651484454403228,38.03910001730775,1.1428571428571428,43.47325716263743,2.415180953479857,0.012679700005769252
HumanEval/69,human,"    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","frq = [0] * (max(lst) + 1)
for i in lst:
    frq[i] += 1;

ans = -1
for i in range(1, len(frq)):
    if frq[i] >= i:
        ans = i

return ans",144,10,16.875,28,5,2,75,52,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,1,2,3.0,3,3,2,1,1,0,0,0,0,0,1,0,0,0,0,0,4,4,7,27.651484454403228,48.43204266092217,2.5714285714285716,124.53953827094274,6.918863237274596,0.016144014220307392
HumanEval/70,human,"    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","res, switch = [], True
while lst:
    res.append(min(lst) if switch else max(lst))
    lst.remove(res[-1])
    switch = not switch
return res",141,6,22.666666666666668,48,1,0,49,36,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,2,9.5,13,4,1,0,1,0,0,0,0,0,1,0,0,0,0,2,3,2,2,4.0,8.0,1.0,8.0,0.4444444444444444,0.0026666666666666666
HumanEval/71,human,"    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","if a + b <= c or a + c <= b or b + c <= a:
    return -1 
s = (a + b + c)/2    
area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
area = round(area, 2)
return area",161,6,26.0,47,5,0,77,28,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,3,2,2.5,4,1,0,1,2,0,0,0,0,0,0,0,0,0,0,0,4,8,21,116.23866587835397,262.33097373688895,6.857142857142857,1798.8409627672384,99.93560904262435,0.08744365791229632
HumanEval/72,human,"    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","if sum(q) > w:
    return False

i, j = 0, len(q)-1
while i<j:
    if q[i] != q[j]:
        return False
    i+=1
    j-=1
return True",134,10,13.88888888888889,20,4,1,74,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,6.0,6,2,1,2,3,0,0,0,0,0,0,0,0,0,0,0,4,5,8,35.60964047443681,66.60791492653966,3.75,249.77968097452373,13.876648943029096,0.022202638308846556
HumanEval/73,human,"    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","ans = 0
for i in range(len(arr) // 2):
    if arr[i] != arr[len(arr) - i - 1]:
        ans += 1
return ans",106,5,20.4,39,4,0,49,32,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,3.0,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,4,9,36.52932501298081,55.506595772116384,2.2222222222222223,123.34799060470309,6.852666144705727,0.01850219859070546
HumanEval/74,human,"    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","l1 = 0
for st in lst1:
    l1 += len(st)

l2 = 0
for st in lst2:
    l2 += len(st)

if l1 <= l2:
    return lst1
else:
    return lst2",134,12,12.3,17,12,2,83,64,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,1,2,2.0,2,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,4,2,4,10.0,23.264662506490403,1.5,34.89699375973561,1.938721875540867,0.007754887502163467
HumanEval/75,human,"    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def is_prime(n):
    for j in range(2,n):
        if n%j == 0:
            return False
    return True

for i in range(2,101):
    if not is_prime(i): continue
    for j in range(2,101):
        if not is_prime(j): continue
        for k in range(2,101):
            if not is_prime(k): continue
            if i*j*k == a: return True
return False",348,14,25.76923076923077,40,14,1,161,128,1,0,3,0,0,0,3,4,0,0,4,0,0,0,4,0,2,0,0.0,0,7,4,5,4,0,0,0,0,0,0,0,0,1,0,0,8,4,13,56.105716335834195,85.83671966625714,2.0,171.67343933251428,9.537413296250794,0.02861223988875238
HumanEval/76,human,"    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","if (n == 1): 
    return (x == 1) 
power = 1
while (power < x): 
    power = power * n 
return (power == x) ",108,6,17.166666666666668,22,3,0,55,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,1,5.0,5,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,3,3,4,12.75488750216347,42.11032383086406,3.75,157.91371436574022,8.772984131430013,0.01403677461028802
HumanEval/77,human,"    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","a = abs(a)
return int(round(a ** (1. / 3))) ** 3 == a",53,2,26.0,42,3,0,19,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1.0,1,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,3,6,20.264662506490406,38.03910001730775,2.0,76.0782000346155,4.226566668589751,0.012679700005769252
HumanEval/78,human,"    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","primes = ('2', '3', '5', '7', 'B', 'D')
total = 0
for i in range(0, len(num)):
    if num[i] in primes:
        total += 1
return total",135,6,21.666666666666668,39,7,0,55,36,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,2,5.5,6,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/79,human,"    return ""db"" + bin(decimal)[2:] + ""db""
","return ""db"" + bin(decimal)[2:] + ""db""",37,1,37.0,37,1,0,9,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,3,4.754887502163469,12.0,0.6666666666666666,8.0,0.4444444444444444,0.004
HumanEval/80,human,"    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","if len(s) < 3:
  return False

for i in range(len(s) - 2):
  
  if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
    return False
return True",149,8,20.285714285714285,58,6,1,60,38,0,0,0,0,0,0,0,3,0,0,1,0,0,0,1,0,4,0,0.0,0,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,6,5,15,70.2129994085646,133.97977094150824,3.5,468.9291982952788,26.05162212751549,0.04465992364716941
HumanEval/81,human,"
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","letter_grade = []
for gpa in grades:
    if gpa == 4.0:
        letter_grade.append(""A+"")
    elif gpa > 3.7:
        letter_grade.append(""A"")
    elif gpa > 3.3:
        letter_grade.append(""A-"")
    elif gpa > 3.0:
        letter_grade.append(""B+"")
    elif gpa > 2.7:
        letter_grade.append(""B"")
    elif gpa > 2.3:
        letter_grade.append(""B-"")
    elif gpa > 2.0:
        letter_grade.append(""C+"")
    elif gpa > 1.7:
        letter_grade.append(""C"")
    elif gpa > 1.3:
        letter_grade.append(""C-"")
    elif gpa > 1.0:
        letter_grade.append(""D+"")
    elif gpa > 0.7:
        letter_grade.append(""D"")
    elif gpa > 0.0:
        letter_grade.append(""D-"")
    else:
        letter_grade.append(""E"")
return letter_grade",742,29,24.620689655172413,33,24,0,317,275,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,12,1,12.0,12,13,1,12,1,0,0,0,0,0,1,0,0,0,0,13,14,2,13,50.105716335834195,140.64806144190666,1.8461538461538463,259.65795958505845,14.425442199169915,0.04688268714730222
HumanEval/82,human,"    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","l = len(string)
if l == 0 or l == 1:
    return False
for i in range(2, l):
    if l % i == 0:
        return False
return True",127,7,17.285714285714285,21,4,0,65,44,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,3,1,1.0,1,2,1,2,3,0,0,0,0,0,0,0,0,0,0,0,5,3,7,24.406371956566698,49.82892142331044,2.142857142857143,106.77626019280808,5.932014455156004,0.016609640474436815
HumanEval/83,human,"    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","if n == 1: return 1
return 18 * (10 ** (n - 2))",47,2,23.0,27,7,0,20,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0.0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,2,4,7,27.651484454403228,41.51317942364757,2.2857142857142856,94.88726725405158,5.27151484744731,0.01383772647454919
HumanEval/84,human,"    return bin(sum(int(i) for i in str(N)))[2:]
",return bin(sum(int(i) for i in str(N)))[2:],43,1,43.0,43,1,0,9,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,4,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/85,human,"    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])",68,1,68.0,68,4,0,15,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0.0,0,3,0,0,1,0,1,0,0,0,0,0,0,0,0,0,3,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/86,human,"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
",return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')]),65,1,65.0,65,0,0,11,4,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,0.0,0,5,0,0,1,0,1,0,0,0,0,0,0,0,0,3,2,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/87,human,"    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])",172,2,85.5,88,2,0,31,8,0,0,0,0,0,0,0,6,0,0,2,0,0,0,2,0,1,1,6.0,6,6,0,0,1,0,1,0,0,0,0,0,0,2,0,0,4,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/88,human,"    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) ",88,1,88.0,88,5,0,18,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,0,0.0,0,2,0,0,1,0,0,0,0,0,1,0,0,0,0,0,2,4,8,32.0,50.18947501009619,2.25,112.92631877271643,6.273684376262024,0.016729825003365395
HumanEval/89,human,"    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","d = 'abcdefghijklmnopqrstuvwxyz'
out = ''
for c in s:
    if c in d:
        out += d[(d.index(c)+2*2) % 26]
    else:
        out += c
return out",146,8,17.375,39,4,0,73,56,1,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,2,2.0,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,3,4,9,36.52932501298081,66.60791492653966,2.6666666666666665,177.62110647077242,9.867839248376246,0.022202638308846556
HumanEval/90,human,"    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","lst = sorted(set(lst))
return None if len(lst) < 2 else lst[1]",62,2,30.5,39,2,0,17,8,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,3.0,3,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/91,human,"    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","import re
sentences = re.split(r'[.?!]\s*', S)
return sum(sentence[0:2] == 'I ' for sentence in sentences)",106,3,34.666666666666664,59,2,0,24,12,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,1,1,9.0,9,2,0,0,1,0,0,0,0,1,0,0,0,0,1,1,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/92,human,"    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
    if (x+y==z) or (x+z==y) or (y+z==x):
        return True
    return False
return False",156,5,30.4,65,0,0,53,40,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,3,0,0.0,0,3,0,2,3,0,0,0,0,0,0,0,0,0,0,0,7,4,12,51.01955000865388,104.0,3.0,312.0,17.333333333333332,0.034666666666666665
HumanEval/93,human,"    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","vowels = ""aeiouAEIOU""
vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
message = message.swapcase()
return ''.join([vowels_replace[i] if i in vowels else i for i in message])",187,4,46.0,74,1,0,40,16,0,0,0,0,0,0,0,3,0,0,3,0,0,0,2,0,0,3,9.0,14,5,0,0,1,0,2,0,0,0,0,0,0,0,0,2,4,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/94,human,"    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def isPrime(n):
    for i in range(2,int(n**0.5)+1):
        if n%i==0:
            return False

    return True
maxx = 0
i = 0
while i < len(lst):
    if(lst[i] > maxx and isPrime(lst[i])):
        maxx = lst[i]
    i+=1
result = sum(int(digit) for digit in str(maxx))
return result
",285,14,20.846153846153847,47,8,1,123,96,1,0,0,0,0,0,0,2,1,0,2,0,0,0,2,1,3,3,3.6666666666666665,6,7,2,2,3,0,0,0,0,0,0,0,0,1,1,0,5,7,14,72.95445336320968,105.41561814669026,4.0,421.66247258676106,23.425692921486725,0.03513853938223009
HumanEval/95,human,"    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","if len(dict.keys()) == 0:
    return False
else:
    state = ""start""
    for key in dict.keys():

        if isinstance(key, str) == False:
            state = ""mixed""
            break
        if state == ""start"":
            if key.isupper():
                state = ""upper""
            elif key.islower():
                state = ""lower""
            else:
                break
        elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                state = ""mixed""
                break
        else:
            break
    return state == ""upper"" or state == ""lower"" ",614,22,28.238095238095237,98,1,1,331,284,0,4,0,0,0,0,2,3,2,0,1,0,0,0,1,0,7,1,5.0,5,8,1,6,2,0,0,0,0,0,0,0,0,0,0,6,12,4,17,77.48686830125578,162.51574464281416,2.823529411764706,458.8679848738282,25.49266582632379,0.05417191488093805
HumanEval/96,human,"    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","primes = []
for i in range(2, n):
    is_prime = True
    for j in range(2, i):
        if i % j == 0:
            is_prime = False
            break
    if is_prime:
        primes.append(i)
return primes
",206,10,19.6,28,3,0,113,92,0,1,0,0,0,0,0,2,0,0,2,0,0,0,2,0,1,2,7.0,8,3,2,2,1,0,0,0,0,0,1,0,0,0,0,1,5,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/97,human,"    return abs(a % 10) * abs(b % 10)
",return abs(a % 10) * abs(b % 10),32,1,32.0,32,4,0,11,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,2,5,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813
HumanEval/98,human,"    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","count = 0
for i in range(0,len(s),2):
    if s[i] in ""AEIOU"":
        count += 1
return count",93,5,17.8,27,4,0,43,32,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,1,5.0,5,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/99,human,"    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","from math import floor, ceil

if value.count('.') == 1:
    while (value[-1] == '0'):
        value = value[:-1]

num = float(value)
if value[-2:] == '.5':
    if num > 0:
        res = ceil(num)
    else:
        res = floor(num)
elif len(value) > 0:
    res = int(round(num))
else:
    res = 0

return res
",308,18,19.333333333333332,29,9,3,147,112,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,5,3,4.0,5,7,1,4,1,0,0,0,0,0,0,0,0,0,0,1,6,3,10,37.974168451037094,77.70923408096293,1.95,151.53300645787772,8.418500358770984,0.025903078026987644
HumanEval/100,human,"    return [n + 2*i for i in range(n)]
",return [n + 2*i for i in range(n)],34,1,34.0,34,1,0,11,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/101,human,"    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","if not s:
    return []

s_list = []

for letter in s:
    if letter == ',':
        s_list.append(' ')
    else:
        s_list.append(letter)

s_list = """".join(s_list)
return s_list.split()",191,13,17.9,29,0,3,83,68,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,1,1,6.0,6,4,1,2,2,0,0,0,0,0,2,0,0,0,0,4,4,2,3,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034
HumanEval/102,human,"    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","if x > y:
    return -1
if y % 2 == 0:
    return y
if x == y:
    return -1
return y - 1",89,7,11.857142857142858,14,5,0,57,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0.0,0,0,0,3,4,0,0,0,0,0,0,0,0,0,0,0,4,5,6,27.11941547876375,65.72920075410866,5.0,328.6460037705433,18.25811132058574,0.021909733584702887
HumanEval/103,human,"    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","if m < n:
    return -1
summation = 0
for i in range(n, m+1):
    summation += i
return bin(round(summation/(m - n + 1)))",121,6,19.333333333333332,40,4,0,49,32,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,9.0,9,3,1,1,2,0,0,0,0,0,0,0,0,0,0,0,3,5,7,31.26112492884004,71.69925001442313,4.642857142857143,332.88937506696453,18.493854170386918,0.02389975000480771
HumanEval/104,human,"    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","odd_digit_elements = []
for i in x:
    if all (int(c) % 2 == 1 for c in str(i)):
        odd_digit_elements.append(i)
return sorted(odd_digit_elements)",152,5,29.6,45,2,0,48,32,0,0,0,0,0,0,0,3,0,0,2,0,0,0,2,0,1,1,18.0,18,5,1,1,1,0,0,0,0,0,1,0,0,0,1,1,4,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/105,human,"    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","dic = {
    1: ""One"",
    2: ""Two"",
    3: ""Three"",
    4: ""Four"",
    5: ""Five"",
    6: ""Six"",
    7: ""Seven"",
    8: ""Eight"",
    9: ""Nine"",
}
sorted_arr = sorted(arr, reverse=True)
new_arr = []
for var in sorted_arr:
    try:
        new_arr.append(dic[var])
    except:
        pass
return new_arr",301,19,14.894736842105264,38,9,0,156,136,0,0,0,0,0,1,0,4,0,0,1,0,1,0,1,0,0,3,6.666666666666667,10,2,1,0,1,0,0,0,0,0,1,1,0,0,0,1,3,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/106,human,"    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","ret = []
for i in range(1,n+1):
    if i%2 == 0:
        x = 1
        for j in range(1,i+1): x *= j
        ret += [x]
    else:
        x = 0
        for j in range(1,i+1): x += j
        ret += [x]
return ret",211,11,18.272727272727273,37,10,0,129,100,0,0,0,0,0,0,0,3,0,0,3,0,0,0,3,0,1,2,2.0,3,3,3,1,1,0,0,0,0,0,3,0,0,0,0,0,5,4,11,46.053747805010275,105.48604608143,3.272727272727273,345.22705990286187,19.179281105714548,0.03516201536047667
HumanEval/107,human,"    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def is_palindrome(n):
    return str(n) == str(n)[::-1]

even_palindrome_count = 0
odd_palindrome_count = 0

for i in range(1, n+1):
    if i%2 == 1 and is_palindrome(i):
            odd_palindrome_count += 1
    elif i%2 == 0 and is_palindrome(i):
        even_palindrome_count += 1
return (even_palindrome_count, odd_palindrome_count)",336,12,32.5,52,11,2,100,72,1,0,0,0,0,0,0,1,2,0,1,0,0,0,1,0,3,2,20.5,21,5,1,2,2,0,0,0,0,0,0,0,0,1,0,0,6,5,16,75.60964047443682,140.55415752892034,3.28125,461.19332939176985,25.6218516328761,0.04685138584297345
HumanEval/108,human,"    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def digits_sum(n):
    neg = 1
    if n < 0: n, neg = -1 * n, -1 
    n = [int(i) for i in str(n)]
    n[0] = n[0] * neg
    return sum(n)
return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))",210,7,29.142857142857142,71,7,0,83,48,1,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,2,4,4.0,8,7,0,1,2,0,2,0,0,0,0,0,0,2,0,0,2,4,8,32.0,57.359400011538504,2.5,143.39850002884626,7.966583334935903,0.01911980000384617
HumanEval/109,human,"    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","if len(arr)==0:
  return True
sorted_array=sorted(arr)
my_arr=[]

min_value=min(arr)
min_index=arr.index(min_value)
my_arr=arr[min_index:]+arr[0:min_index]
for i in range(len(arr)):
  if my_arr[i]!=sorted_array[i]:
    return False
return True",243,12,21.09090909090909,39,2,1,64,56,0,0,0,0,0,0,0,4,0,0,1,0,0,0,1,0,2,4,9.0,12,6,1,2,3,0,0,0,0,0,1,0,0,0,0,1,4,3,6,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938
HumanEval/110,human,"    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","odd = 0
even = 0
for i in lst1:
    if i%2 == 1:
        odd += 1
for i in lst2:
    if i%2 == 0:
        even += 1
if even >= odd:
    return ""YES""
return ""NO""
        ",169,12,13.166666666666666,17,10,0,109,84,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,3,2,3.5,4,0,2,3,2,0,0,0,0,0,0,0,0,0,0,0,6,4,8,32.0,75.28421251514429,3.5,263.494743803005,14.638596877944723,0.025094737505048096
HumanEval/111,human,"    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","dict1={}
list1=test.split("" "")
t=0

for i in list1:
    if(list1.count(i)>t) and i!='':
        t=list1.count(i)
if t>0:
    for i in list1:
        if(list1.count(i)==t):
            
            dict1[i]=t
return dict1",220,13,17.333333333333332,35,11,1,107,96,0,0,0,0,0,0,0,2,1,0,2,0,0,0,2,0,4,4,4.666666666666667,8,4,2,3,1,0,0,0,0,0,0,1,0,0,0,4,7,4,8,32.0,53.77443751081735,2.5,134.43609377704337,7.468671876502409,0.017924812503605784
HumanEval/112,human,"    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","s = ''.join([char for char in s if char not in c])
return (s,s[::-1] == s)",74,2,36.5,50,1,0,22,8,0,0,0,0,0,0,1,1,0,0,2,0,0,0,1,0,1,1,1.0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,3,3,5,16.36452797660028,24.0,1.5,36.0,2.0,0.008
HumanEval/113,human,"    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","res = []
for arr in lst:
    n = sum(int(d)%2==1 for d in arr)
    res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
return res",194,5,38.0,120,2,0,61,28,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,1,2,2.0,3,7,1,0,1,0,0,0,0,0,1,0,0,0,1,1,3,3,20,91.19344939991072,135.7068586817104,1.5,203.5602880225656,11.308904890142534,0.04523561956057014
HumanEval/114,human,"    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","max_sum = 0
s = 0
for num in nums:
    s += -num
    if (s < 0):
        s = 0
    max_sum = max(s, max_sum)
if max_sum == 0:
    max_sum = max(-i for i in nums)
min_sum = -max_sum
return min_sum",195,11,16.818181818181817,35,5,0,97,68,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,2,3,4.0,7,2,1,2,1,0,0,0,0,0,0,0,0,0,1,0,5,4,6,23.509775004326936,49.82892142331044,3.0,149.4867642699313,8.304820237218406,0.016609640474436815
HumanEval/115,human,"    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
",return sum([math.ceil(sum(arr)/capacity) for arr in grid]),58,1,58.0,58,0,0,9,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,3,0,0,1,0,1,0,0,0,0,0,0,0,0,1,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/116,human,"    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))",63,1,63.0,63,2,0,8,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0.0,0,4,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/117,human,"    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","result = []
for word in s.split():
    n_consonants = 0
    for i in range(0, len(word)):
        if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
            n_consonants += 1 
    if n_consonants == n:
        result.append(word)
return result
",246,9,26.333333333333332,56,3,0,98,76,0,0,0,0,0,0,1,6,0,0,3,0,0,0,2,0,1,2,9.0,12,5,2,2,1,0,0,0,0,0,2,0,0,0,0,3,5,3,5,16.36452797660028,27.0,1.8,48.6,2.7,0.009
HumanEval/118,human,"    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","if len(word) < 3:
    return """"

vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
for i in range(len(word)-2, 0, -1):
    if word[i] in vowels:
        if (word[i+1] not in vowels) and (word[i-1] not in vowels):
            return word[i]
return """"",259,9,31.375,67,6,1,94,60,0,0,0,0,0,0,2,7,1,0,4,0,0,0,1,0,1,1,6.0,6,3,1,3,3,0,0,0,0,0,0,0,1,0,0,0,6,7,12,62.67103446305711,110.44611534953322,4.958333333333333,547.6286552747688,30.4238141819316,0.03681537178317774
HumanEval/119,human,"    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def check(s):
    val = 0
    for i in s:
        if i == '(':
            val = val + 1
        else:
            val = val - 1
        if val < 0:
            return False
    return True if val == 0 else False

S1 = lst[0] + lst[1]
S2 = lst[1] + lst[0]
return 'Yes' if check(S1) or check(S2) else 'No'",304,14,22.384615384615383,48,13,1,167,124,1,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,3,3,2.5,3,2,1,2,3,0,0,0,0,0,0,0,0,1,0,0,3,5,11,49.663388279447084,96.0,3.6363636363636362,349.09090909090907,19.39393939393939,0.032
HumanEval/120,human,"    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","if k == 0:
    return []
arr.sort()
ans = arr[-k:]
return ans",61,5,11.4,14,1,0,31,24,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,3.0,3,1,0,1,2,0,0,0,0,0,1,0,0,0,0,1,2,2,2,4.0,10.0,1.5,15.0,0.8333333333333334,0.0033333333333333335
HumanEval/121,human,"    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])",67,1,67.0,67,4,0,14,4,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,2,0,0.0,0,2,0,0,1,0,1,0,0,0,0,0,0,0,0,0,4,3,9,33.28421251514428,53.77443751081735,1.6666666666666667,89.62406251802892,4.9791145843349405,0.017924812503605784
HumanEval/122,human,"    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
",return sum(elem for elem in arr[:k] if len(str(elem)) <= 2),59,1,59.0,59,1,0,13,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0.0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,1,0,3,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/123,human,"    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","if n%2==0:
    odd_collatz = [] 
else:
    odd_collatz = [n]
while n > 1:
    if n % 2 == 0:
        n = n/2
    else:
        n = n*3 + 1
        
    if n%2 == 1:
        odd_collatz.append(int(n))

return sorted(odd_collatz)",227,14,16.46153846153846,34,10,1,128,104,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,4,2,6.0,11,3,1,3,1,0,0,0,0,0,2,0,0,0,0,1,5,6,9,44.039100017307746,117.20671786825557,6.666666666666667,781.3781191217038,43.40989550676132,0.03906890595608519
HumanEval/124,human,"    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","try:
    date = date.strip()
    month, day, year = date.split('-')
    month, day, year = int(month), int(day), int(year)
    if month < 1 or month > 12:
        return False
    if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
        return False
    if month in [4,6,9,11] and day < 1 or day > 30:
        return False
    if month == 2 and day < 1 or day > 29:
        return False
except:
    return False

return True",430,16,27.666666666666668,58,27,1,182,124,0,0,0,0,0,1,0,4,3,0,2,0,0,0,0,0,9,2,11.0,18,5,0,4,6,0,0,0,0,0,2,0,0,0,0,2,13,6,24,125.5488750216347,264.97209216286,4.5,1192.37441473287,66.243023040715,0.08832403072095334
HumanEval/125,human,"    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","if "" "" in txt:
    return txt.split()
elif "","" in txt:
    return txt.replace(',',' ').split()
else:
    return len([i for i in txt if i.islower() and ord(i)%2 == 0])",166,6,26.833333333333332,65,2,0,57,36,0,0,0,0,0,0,0,2,1,0,3,0,0,0,1,0,1,0,0.0,0,6,0,2,3,0,1,0,0,0,0,0,0,0,0,4,6,4,9,36.52932501298081,55.506595772116384,2.2222222222222223,123.34799060470309,6.852666144705727,0.01850219859070546
HumanEval/126,human,"    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","count_digit = dict([(i, 0) for i in lst])
for i in lst:
    count_digit[i]+=1 
if any(count_digit[i] > 2 for i in lst):
    return False
if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
    return True
else:
    return False

",233,10,24.77777777777778,55,5,1,89,60,0,0,0,0,0,0,0,4,0,0,4,0,0,0,4,0,2,1,11.0,11,5,1,2,3,0,1,0,0,0,0,0,0,0,2,0,7,4,7,27.651484454403228,41.51317942364757,2.2857142857142856,94.88726725405158,5.27151484744731,0.01383772647454919
HumanEval/127,human,"    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def is_prime(num):
    if num == 1 or num == 0:
        return False
    if num == 2:
        return True
    for i in range(2, num):
        if num%i == 0:
            return False
    return True

l = max(interval1[0], interval2[0])
r = min(interval1[1], interval2[1])
length = r - l
if length > 0 and is_prime(length):
    return ""YES""
return ""NO""",350,16,22.333333333333332,35,14,1,155,116,1,0,0,0,0,0,0,2,1,0,1,0,0,0,1,0,5,3,3.5,6,4,1,4,6,0,0,0,0,0,0,0,0,1,0,0,3,6,14,68.81274391313339,116.69205856195879,3.857142857142857,450.09794016755535,25.005441120419743,0.03889735285398626
HumanEval/128,human,"    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","if not arr: return None
prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
return prod * sum([abs(i) for i in arr])",138,3,45.333333333333336,73,4,0,38,12,0,0,0,0,0,0,1,1,0,1,2,0,0,0,1,0,1,1,4.0,4,5,0,1,2,0,1,0,0,0,0,0,0,1,0,0,4,6,8,39.50977500432694,60.91767875292166,3.75,228.44129532345622,12.691183073525345,0.020305892917640553
HumanEval/129,human,"    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","n = len(grid)
val = n * n + 1
for i in range(n):
    for j in range(n):
        if grid[i][j] == 1:
            temp = []
            if i != 0:
                temp.append(grid[i - 1][j])

            if j != 0:
                temp.append(grid[i][j - 1])

            if i != n - 1:
                temp.append(grid[i + 1][j])

            if j != n - 1:
                temp.append(grid[i][j + 1])

            val = min(temp)

ans = []
for i in range(k):
    if i % 2 == 0:
        ans.append(1)
    else:
        ans.append(val)
return ans",544,27,23.545454545454547,43,13,5,316,260,0,0,0,0,0,0,0,3,0,0,3,0,0,0,3,0,6,4,2.6666666666666665,4,11,3,6,1,0,0,0,0,0,2,0,0,0,0,6,10,6,11,53.563522809337215,183.9358278562653,8.181818181818182,1504.9295006421705,83.60719448012058,0.0613119426187551
HumanEval/130,human,"    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","if n == 0:
    return [1]
my_tri = [1, 3]
for i in range(2, n + 1):
    if i % 2 == 0:
        my_tri.append(i / 2 + 1)
    else:
        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
return my_tri",210,9,22.444444444444443,66,14,0,99,64,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,2,1,6.0,6,3,1,2,2,0,0,0,0,0,2,0,0,0,0,2,4,5,13,59.715356810271004,150.11730005192322,4.615384615384615,692.8490771627226,38.49161539792903,0.05003910001730774
HumanEval/131,human,"    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","product = 1
odd_count = 0
for digit in str(n):
    int_digit = int(digit)
    if int_digit%2 == 1:
        product= product*int_digit
        odd_count+=1
if odd_count ==0:
    return 0
else:
    return product",210,11,18.181818181818183,34,7,0,93,76,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,2,3,8.0,9,2,1,2,2,0,0,0,0,0,0,0,0,0,0,0,4,4,7,27.651484454403228,51.89147427955947,2.857142857142857,148.26135508445563,8.236741949136423,0.01729715809318649
HumanEval/132,human,"    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","opening_bracket_index = []
closing_bracket_index = []
for i in range(len(string)):
    if string[i] == '[':
        opening_bracket_index.append(i)
    else:
        closing_bracket_index.append(i)
closing_bracket_index.reverse()
cnt = 0
i = 0
l = len(closing_bracket_index)
for idx in opening_bracket_index:
    if i < l and idx < closing_bracket_index[i]:
        cnt += 1
        i += 1
return cnt >= 2

",407,17,24.375,48,5,1,145,112,0,0,0,0,0,0,0,2,1,0,2,0,0,0,2,0,4,5,8.333333333333334,21,6,2,2,1,0,0,0,0,0,2,0,0,0,0,3,6,5,11,49.663388279447084,84.0,3.1818181818181817,267.27272727272725,14.848484848484848,0.028
HumanEval/133,human,"    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","import math
squared = 0
for i in lst:
    squared += math.ceil(i)**2
return squared",83,5,15.8,30,2,0,33,24,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,0,1,7.0,7,1,1,0,1,0,0,0,0,1,0,0,0,0,0,1,2,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/134,human,"    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","check = txt.split(' ')[-1]
return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False",106,2,52.5,79,7,0,24,8,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,3,1,5.0,5,4,0,0,1,0,0,0,0,0,0,0,0,0,0,2,3,4,7,27.651484454403228,44.97261104228487,2.2857142857142856,102.79453952522255,5.710807751401252,0.01499087034742829
HumanEval/135,human,"    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","ind=-1
i=1
while i<len(arr):
  if arr[i]<arr[i-1]:
    ind=i
  i+=1
return ind",78,7,10.285714285714286,21,4,0,39,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2.0,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,4,5,19.60964047443681,44.37895002019238,3.6,159.76422007269255,8.875790004038475,0.014792983340064125
HumanEval/136,human,"    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","smallest = list(filter(lambda x: x < 0, lst))
largest = list(filter(lambda x: x > 0, lst))
return (max(smallest) if smallest else None, min(largest) if largest else None)",170,3,56.0,79,2,0,36,12,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,2,7.5,8,6,0,0,1,0,0,0,0,0,0,0,0,2,0,0,3,2,2,4.0,12.0,2.0,24.0,1.3333333333333333,0.004
HumanEval/137,human,"    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","temp_a, temp_b = a, b
if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
if float(temp_a) == float(temp_b): return None
return a if float(temp_a) > float(temp_b) else b ",240,5,47.2,60,0,0,47,20,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,3,11.0,16,8,0,3,2,0,0,0,0,0,0,0,0,0,0,2,5,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/138,human,"    return n%2 == 0 and n >= 8
",return n%2 == 0 and n >= 8,26,1,26.0,26,3,0,11,4,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0.0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,4,7,27.651484454403228,41.51317942364757,2.2857142857142856,94.88726725405158,5.27151484744731,0.01383772647454919
HumanEval/139,human,"    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","fact_i = 1
special_fact = 1
for i in range(1, n+1):
    fact_i *= i
    special_fact *= fact_i
return special_fact",114,6,18.166666666666668,26,4,0,45,32,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,2,9.0,12,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,5,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813
HumanEval/140,human,"    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","new_text = """"
i = 0
start, end = 0, 0
while i < len(text):
    if text[i] == "" "":
        end += 1
    else:
        if end - start > 2:
            new_text += ""-""+text[i]
        elif end - start > 0:
            new_text += ""_""*(end - start)+text[i]
        else:
            new_text += text[i]
        start, end = i+1, i+1
    i+=1
if end - start > 2:
    new_text += ""-""
elif end - start > 0:
    new_text += ""_""
return new_text",435,20,20.8,49,11,0,230,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,3,7.0,12,1,1,5,1,0,0,0,0,0,0,0,0,0,0,0,7,6,23,119.55169999363824,335.2006886638025,6.0,2011.204131982815,111.73356288793417,0.11173356288793417
HumanEval/141,human,"    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","suf = ['txt', 'exe', 'dll']
lst = file_name.split(sep='.')
if len(lst) != 2:
    return 'No'
if not lst[1] in suf:
    return 'No'
if len(lst[0]) == 0:
    return 'No'
if not lst[0][0].isalpha():
    return 'No'
t = len([x for x in lst[0] if x.isdigit()])
if t > 3:
    return 'No'
return 'Yes'",294,14,20.071428571428573,43,8,0,111,76,0,0,0,0,0,0,2,1,0,0,2,0,0,0,1,0,3,3,2.0,3,6,0,5,6,0,1,0,0,0,1,0,0,0,0,3,8,5,10,44.82892142331043,62.5102495297363,2.5,156.27562382434076,8.681979101352264,0.020836749843245433
HumanEval/142,human,"    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","result =[]
for i in range(len(lst)):
    if i %3 == 0:
        result.append(lst[i]**2)
    elif i % 4 == 0 and i%3 != 0:
        result.append(lst[i]**3)
    else:
        result.append(lst[i])
return sum(result)",213,9,22.77777777777778,33,8,0,90,72,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,3,1,6.0,6,6,1,2,1,0,0,0,0,0,1,0,0,0,0,3,5,5,12,54.62919048309069,110.36149671375918,3.75,413.85561267659693,22.99197848203316,0.03678716557125306
HumanEval/143,human,"    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","new_lst = []
for word in sentence.split():
    flg = 0
    if len(word) == 1:
        flg = 1
    for i in range(2, len(word)):
        if len(word)%i == 0:
            flg = 1
    if flg == 0 or len(word) == 2:
        new_lst.append(word)
return "" "".join(new_lst)",265,11,23.181818181818183,34,8,0,126,96,0,0,0,0,0,0,0,9,0,0,2,0,0,0,2,0,4,2,5.0,7,8,2,3,1,0,0,0,0,0,1,0,0,0,0,3,7,3,11,42.808635307173745,68.53238859703687,1.6363636363636365,112.14390861333307,6.23021714518517,0.022844129532345624
HumanEval/144,human,"    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","a, b = x.split(""/"")
c, d = n.split(""/"")
numerator = int(a) * int(c)
denom = int(b) * int(d)
if (numerator/denom == int(numerator/denom)):
    return True
return False",166,7,22.857142857142858,45,0,0,51,32,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,1,4,6.666666666666667,9,7,0,1,2,0,0,0,0,0,0,0,0,0,0,2,2,3,8,28.75488750216347,51.89147427955947,1.875,97.296514274174,5.405361904120777,0.01729715809318649
HumanEval/145,human,"    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def digits_sum(n):
    neg = 1
    if n < 0: n, neg = -1 * n, -1 
    n = [int(i) for i in str(n)]
    n[0] = n[0] * neg
    return sum(n)
return sorted(nums, key=digits_sum)",174,7,24.0,35,6,0,75,48,1,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,1,4,4.0,8,4,0,1,2,0,1,0,0,0,0,0,0,1,0,0,1,3,6,20.264662506490406,41.20902501875006,2.0,82.41805003750012,4.578780557638896,0.013736341672916687
HumanEval/146,human,"    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","count = 0
for num in nums:
    if num > 10:
        odd_digits = (1, 3, 5, 7, 9)
        number_as_string = str(num)
        if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
            count += 1
    
return count ",253,9,27.22222222222222,94,11,0,111,84,0,0,0,0,0,0,0,1,1,0,3,0,0,0,1,0,1,3,10.333333333333334,16,3,1,2,1,0,0,0,0,0,0,0,0,0,0,0,5,5,9,40.13896548741762,64.72503367497926,3.0555555555555554,197.77093622910328,10.987274234950183,0.021575011224993085
HumanEval/147,human,"    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","A = [i*i - i + 1 for i in range(1,n+1)]
ans = []
for i in range(n):
    for j in range(i+1,n):
        for k in range(j+1,n):
            if (A[i]+A[j]+A[k])%3 == 0:
                ans += [(A[i],A[j],A[k])]
return len(ans)",223,8,27.0,41,7,0,99,72,0,0,0,0,0,0,0,4,0,0,4,0,0,0,4,0,1,2,2.0,3,5,3,1,1,0,1,0,0,0,2,0,0,0,0,0,6,5,16,75.60964047443682,144.94647495169912,3.4375,498.2535076464657,27.68075042480365,0.048315491650566374
HumanEval/148,human,"    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
    return ()
planet1_index = planet_names.index(planet1)
planet2_index = planet_names.index(planet2)
if planet1_index < planet2_index:
    return (planet_names[planet1_index + 1: planet2_index])
else:
    return (planet_names[planet2_index + 1 : planet1_index])",442,9,48.22222222222222,94,16,0,87,48,0,0,0,0,0,0,2,2,0,0,2,0,0,0,0,0,2,3,12.5,13,2,0,2,3,0,0,0,0,0,0,0,0,0,0,2,5,5,9,40.13896548741762,83.76180828526728,4.166666666666667,349.00753452194704,19.3893074734415,0.02792060276175576
HumanEval/149,human,"    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","lst.sort()
new_lst = []
for i in lst:
    if len(i)%2 == 0:
        new_lst.append(i)
return sorted(new_lst, key=len)",117,6,18.666666666666668,31,2,0,46,36,0,0,0,0,0,0,0,3,0,0,1,0,0,0,1,0,1,1,7.0,7,4,1,1,1,0,0,0,0,0,1,0,0,0,0,2,3,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/150,human,"    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","if n == 1:
    return y
for i in range(2, n):
    if n % i == 0:
        return y
        break
else:
    return x",114,8,13.375,21,3,0,75,60,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,2,0,0.0,0,1,1,2,3,0,0,0,0,0,0,0,0,0,0,0,5,2,5,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813
HumanEval/151,human,"    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])",73,1,73.0,73,4,0,20,4,0,0,0,0,0,0,1,1,2,0,2,0,0,0,1,0,2,0,0.0,0,2,0,0,1,0,1,0,0,0,0,0,0,0,0,0,5,6,9,44.039100017307746,74.23092131656186,4.333333333333333,321.6673257051014,17.870406983616746,0.024743640438853954
HumanEval/152,human,"    return [abs(x-y) for x,y in zip(game,guess)]
","return [abs(x-y) for x,y in zip(game,guess)]",44,1,44.0,44,0,0,9,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,2,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/153,human,"    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","strong = extensions[0]
my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
for s in extensions:
    val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
    if val > my_val:
        strong = s
        my_val = val

ans = class_name + ""."" + strong
return ans
",400,10,43.333333333333336,136,3,1,119,60,0,0,0,0,0,0,0,5,4,0,5,0,0,0,5,0,1,4,4.5,6,12,1,1,1,0,4,0,0,0,0,0,0,0,0,8,15,4,18,83.05865002596161,120.40465370320703,2.0,240.80930740641406,13.378294855911893,0.04013488456773568
HumanEval/154,human,"    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","l = len(b)
pat = b + b
for i in range(len(a) - l + 1):
    for j in range(l + 1):
        if a[i:i+l] == pat[j:j+l]:
            return True
return False",153,7,21.0,34,2,0,75,52,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,1,2,2.0,3,4,2,1,2,0,0,0,0,0,0,0,0,0,0,0,4,3,9,33.28421251514428,75.28421251514429,2.3333333333333335,175.66316253533668,9.759064585296482,0.025094737505048096
HumanEval/155,human,"    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","even_count = 0
odd_count = 0
for i in str(abs(num)):
    if int(i)%2==0:
        even_count +=1
    else:
        odd_count +=1
return (even_count, odd_count)",158,8,18.875,30,6,0,68,56,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,2,9.5,10,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,3,7,24.406371956566698,39.863137138648355,1.7142857142857142,68.33680652339717,3.796489251299843,0.013287712379549451
HumanEval/156,human,"    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","num = [1, 4, 5, 9, 10, 40, 50, 90,  
       100, 400, 500, 900, 1000] 
sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
       ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
i = 12
res = ''
while number: 
    div = number // num[i] 
    number %= num[i] 
    while div: 
        res += sym[i] 
        div -= 1
    i -= 1
return res.lower()",325,14,22.285714285714285,45,32,0,158,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,5,2.0,3,1,2,0,1,0,0,0,0,0,2,0,0,0,0,1,3,4,8,32.0,53.77443751081735,2.5,134.43609377704337,7.468671876502409,0.017924812503605784
HumanEval/157,human,"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
",return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b,63,1,63.0,63,0,0,21,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,3,0,0.0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,4,18,83.05865002596161,218.51214931322758,3.6666666666666665,801.2112141485011,44.51173411936117,0.0728373831044092
HumanEval/158,human,"    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","return sorted(words, key = lambda x: (-len(set(x)), x))[0]",58,1,58.0,58,1,0,11,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0.0,0,3,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666
HumanEval/159,human,"    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","if(need <= remaining):
    return [ number + need , remaining-need ]
else:
    return [ number + remaining , 0]",111,4,27.0,45,1,0,39,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0.0,0,0,0,1,2,0,0,0,0,0,2,0,0,0,0,0,2,3,3,9.509775004326938,31.019550008653873,4.0,124.07820003461549,6.893233335256416,0.010339850002884624
HumanEval/160,human,"    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","expression = str(operand[0])
for oprt, oprn in zip(operator, operand[1:]):
    expression+= oprt + str(oprn)
return eval(expression)",132,4,32.25,45,2,0,31,20,0,0,0,0,0,0,0,2,2,0,1,0,0,0,1,0,0,1,10.0,10,4,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,1,4,8.0,13.931568569324174,0.5,6.965784284662087,0.3869880158145604,0.004643856189774725
HumanEval/161,human,"    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","flg = 0
idx = 0
new_str = list(s)
for i in s:
    if i.isalpha():
        new_str[idx] = i.swapcase()
        flg = 1
    idx += 1
s = """"
for i in new_str:
    s += i
if flg == 0:
    return s[len(s)::-1]
return s",213,14,14.285714285714286,35,6,0,116,88,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,1,5,5.75,12,4,2,2,2,0,0,0,0,0,0,0,0,0,0,2,5,3,6,20.264662506490406,34.86917501586544,1.75,61.021056277764515,3.3900586820980285,0.011623058338621813
HumanEval/162,human,"    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","import hashlib
return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",85,2,42.0,70,1,0,14,8,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0.0,0,3,0,0,1,0,0,0,0,1,0,0,0,0,0,3,2,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/163,human,"    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","lower = max(2, min(a, b))
upper = min(8, max(a, b))

return [i for i in range(lower, upper+1) if i % 2 == 0]",108,4,35.0,55,5,1,32,12,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,2,5.0,5,5,0,0,1,0,1,0,0,0,0,0,0,0,0,0,3,3,6,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938
HumanEval/0,gpt4,"    numbers.sort()
    for i in range(len(numbers) - 1):
        if abs(numbers[i] - numbers[i + 1]) < threshold:
            return True
    return False
","numbers.sort()
for i in range(len(numbers) - 1):
    if abs(numbers[i] - numbers[i + 1]) < threshold:
        return True
return False",134,5,26.0,52,2,0,46,32,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,1,0,0.0,0,4,1,1,2,0,0,0,0,0,0,0,0,0,0,1,3,3,7,24.406371956566698,39.863137138648355,1.7142857142857142,68.33680652339717,3.796489251299843,0.013287712379549451
HumanEval/1,gpt4,"    paren_string = paren_string.replace("" "", """")  # remove spaces
    level = 0
    groups = []
    current_group = []

    for char in paren_string:
        if char == '(':
            level += 1
            current_group.append(char)
        elif char == ')':
            level -= 1
            current_group.append(char)
            if level == 0:  # end of a group
                groups.append(''.join(current_group))
                current_group = []  # reset for next group

    return groups
","paren_string = paren_string.replace("" "", """")
level = 0
groups = []
current_group = []

for char in paren_string:
    if char == '(':
        level += 1
        current_group.append(char)
    elif char == ')':
        level -= 1
        current_group.append(char)
        if level == 0:
            groups.append(''.join(current_group))
            current_group = []

return groups",381,17,24.333333333333332,49,4,2,177,132,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,3,4,9.0,13,5,1,3,1,0,0,0,0,0,3,0,0,0,0,5,5,3,6,20.264662506490406,47.548875021634686,2.5,118.87218755408671,6.604010419671484,0.01584962500721156
HumanEval/2,gpt4,"    return number - int(number)
",return number - int(number),27,1,27.0,27,0,0,7,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/3,gpt4,"    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False
","balance = 0
for operation in operations:
    balance += operation
    if balance < 0:
        return True
return False",118,6,18.833333333333332,28,2,0,52,40,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,7.0,7,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,3,2,3,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725
HumanEval/4,gpt4,"    # Calculate mean
    mean = sum(numbers) / len(numbers)

    # Calculate absolute deviations from the mean
    absolute_deviations = [abs(x - mean) for x in numbers]

    # Return the average of these absolute deviations
    return sum(absolute_deviations) / len(absolute_deviations)
","mean = sum(numbers) / len(numbers)

absolute_deviations = [abs(x - mean) for x in numbers]

return sum(absolute_deviations) / len(absolute_deviations)",150,5,48.666666666666664,58,0,2,54,24,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,2,11.5,19,5,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,2,6,17.509775004326936,27.0,1.0,27.0,1.5,0.009
HumanEval/5,gpt4,"    result = []
    for num in numbers:
        result.extend([num, delimeter])
    return result[:-1] if result else result
","result = []
for num in numbers:
    result.extend([num, delimeter])
return result[:-1] if result else result",108,4,26.25,40,1,0,31,20,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,6.0,6,1,1,0,1,0,0,0,0,0,2,0,0,0,0,1,3,1,1,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666
HumanEval/6,gpt4,"    results = []
    for group in paren_string.split():
        level = 0
        max_level = 0
        for char in group:
            if char == '(':
                level += 1
                max_level = max(max_level, level)
            elif char == ')':
                if level > 0:
                    level -= 1
                else:
                    raise ValueError(""Unbalanced parentheses"")
        if level != 0:
            raise ValueError(""Unbalanced parentheses"")
        results.append(max_level)
    return results
","results = []
for group in paren_string.split():
    level = 0
    max_level = 0
    for char in group:
        if char == '(':
            level += 1
            max_level = max(max_level, level)
        elif char == ')':
            if level > 0:
                level -= 1
            else:
                raise ValueError(""Unbalanced parentheses"")
    if level != 0:
        raise ValueError(""Unbalanced parentheses"")
    results.append(max_level)
return results",466,17,26.470588235294116,58,6,0,228,192,0,0,0,0,0,0,0,4,0,0,2,0,0,2,2,0,4,3,7.0,9,5,2,4,1,2,0,0,0,0,1,0,0,0,0,2,7,5,6,27.11941547876375,62.26976913547136,5.0,311.3488456773568,17.29715809318649,0.020756589711823786
HumanEval/7,gpt4,"    return [s for s in strings if substring in s]
",return [s for s in strings if substring in s],45,1,45.0,45,0,0,13,4,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,0,0.0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,3,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/8,gpt4,"    if not numbers:
        return (0, 1)

    _sum = 0
    _product = 1
    for num in numbers:
        _sum += num
        _product *= num

    return (_sum, _product)
","if not numbers:
    return (0, 1)

_sum = 0
_product = 1
for num in numbers:
    _sum += num
    _product *= num

return (_sum, _product)",137,10,16.0,23,4,2,61,44,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,2,6.0,8,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,3,3,4,12.75488750216347,22.458839376460833,1.875,42.11032383086406,2.3394624350480036,0.007486279792153611
HumanEval/9,gpt4,"    maxes = []
    for i in range(len(numbers)):
        maxes.append(max(numbers[:i+1]))
    return maxes
","maxes = []
for i in range(len(numbers)):
    maxes.append(max(numbers[:i+1]))
return maxes",90,4,21.75,36,1,0,26,20,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,5.0,5,4,1,0,1,0,0,0,0,0,1,0,0,0,0,1,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/10,gpt4,"    # If the string is a palindrome already or is empty, return the string as is
    if is_palindrome(string) or len(string) == 0:
        return string

    # Reverse the string
    rev_string = string[::-1]

    # Find the longest palindromic suffix
    for i in range(len(string)):
        if string[i:] == rev_string[:len(string) - i]:
            return string + rev_string[len(string) - i:]

    return string
    def is_palindrome(string: str) -> bool:
        return string == string[::-1]
","if is_palindrome(string) or len(string) == 0:
    return string

rev_string = string[::-1]

for i in range(len(string)):
    if string[i:] == rev_string[:len(string) - i]:
        return string + rev_string[len(string) - i:]

return string
def is_palindrome(string: str) -> bool:
    return string == string[::-1]",313,12,33.55555555555556,52,3,3,120,68,1,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,4,1,10.0,10,6,1,2,4,0,0,0,0,0,0,0,0,1,0,0,5,5,15,70.2129994085646,108.04820237218406,2.6666666666666665,288.12853965915747,16.007141092175416,0.03601606745739469
HumanEval/11,gpt4,"    result = int(a, 2) ^ int(b, 2)  # Convert to integers and perform XOR
    return bin(result)[2:].zfill(max(len(a), len(b)))  # Convert back to binary string
","result = int(a, 2) ^ int(b, 2)
return bin(result)[2:].zfill(max(len(a), len(b)))  # Convert back to binary string",113,2,56.0,82,3,0,31,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6.0,6,7,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/12,gpt4,"    if not strings:
        return None

    longest_str = max(strings, key=len)
    return longest_str
","if not strings:
    return None

longest_str = max(strings, key=len)
return longest_str",87,5,20.75,35,0,1,27,20,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,11.0,11,1,0,1,2,0,0,0,0,0,0,0,0,0,0,0,2,1,1,0.0,2.0,0.5,1.0,0.05555555555555555,0.0006666666666666666
HumanEval/13,gpt4,"    while b != 0:
        a, b = b, a % b
    return abs(a)
","while b != 0:
    a, b = b, a % b
return abs(a)",47,3,15.0,19,1,0,26,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,6.0,6,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,3,6.754887502163469,13.931568569324174,1.3333333333333333,18.575424759098897,1.0319680421721609,0.004643856189774725
HumanEval/14,gpt4,"    return [string[:i] for i in range(1, len(string)+1)]
","return [string[:i] for i in range(1, len(string)+1)]",52,1,52.0,52,2,0,10,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,2,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/15,gpt4,"    return ' '.join(str(i) for i in range(n+1))
",return ' '.join(str(i) for i in range(n+1)),43,1,43.0,43,1,0,10,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,1,1,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/16,gpt4,"    return len(set(string.lower()))
",return len(set(string.lower())),31,1,31.0,31,0,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/17,gpt4,"    # Create a dictionary to map musical notes to beats
    note_dict = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }

    # Split the string by spaces to get individual notes
    notes = music_string.split()

    # Use a list comprehension to create a list of beats,
    # mapping each note to its value in the dictionary
    beats = [note_dict[note] for note in notes]

    return beats
","note_dict = {
    'o': 4,
    'o|': 2,
    '.|': 1
}

notes = music_string.split()

beats = [note_dict[note] for note in notes]

return beats",141,11,16.375,43,3,3,111,60,0,0,0,0,0,0,6,1,0,0,1,0,0,0,1,0,0,3,7.0,9,1,0,0,1,0,1,0,0,0,0,1,0,0,0,1,2,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/18,gpt4,"    count = 0
    sub_len = len(substring)
    for i in range(len(string)):
        if string[i:i+sub_len] == substring:
            count += 1
    return count
","count = 0
sub_len = len(substring)
for i in range(len(string)):
    if string[i:i+sub_len] == substring:
        count += 1
return count",136,6,21.833333333333332,40,2,0,49,36,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,2,6.0,7,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,2,6,17.509775004326936,27.0,1.0,27.0,1.5,0.009
HumanEval/19,gpt4,"    num_dict = {
        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,
        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9
    }

    words = numbers.split()
    words.sort(key=lambda x: num_dict[x])

    return ' '.join(words)
","num_dict = {
    'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,
    'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9
}

words = numbers.split()
words.sort(key=lambda x: num_dict[x])

return ' '.join(words)",218,9,30.0,58,10,2,62,36,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,2,6.5,8,3,0,0,1,0,0,0,0,0,0,1,0,1,0,3,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/20,gpt4,"    if len(numbers) < 2:
        raise ValueError(""Input list should have at least two numbers."")

    # Sort the numbers
    numbers.sort()

    # Initialize the minimum difference and the pair
    min_diff = float('inf')
    closest_pair = (None, None)

    for i in range(1, len(numbers)):
        # Check if the difference is smaller than the current minimum difference
        if numbers[i] - numbers[i - 1] < min_diff:
            min_diff = numbers[i] - numbers[i - 1]
            closest_pair = (numbers[i - 1], numbers[i])

    return closest_pair
","if len(numbers) < 2:
    raise ValueError(""Input list should have at least two numbers."")

numbers.sort()

min_diff = float('inf')
closest_pair = (None, None)

for i in range(1, len(numbers)):
    if numbers[i] - numbers[i - 1] < min_diff:
        min_diff = numbers[i] - numbers[i - 1]
        closest_pair = (numbers[i - 1], numbers[i])

return closest_pair",359,14,34.6,68,5,4,140,80,0,0,0,0,0,0,0,3,0,2,1,0,0,1,1,0,2,2,10.0,12,6,1,2,1,1,0,0,0,0,0,0,0,0,0,1,4,2,10,35.219280948873624,75.28421251514429,1.4,105.397897521202,5.855438751177889,0.025094737505048096
HumanEval/21,gpt4,"    min_num = min(numbers)
    max_num = max(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]
","min_num = min(numbers)
max_num = max(numbers)
return [(num - min_num) / (max_num - min_num) for num in numbers]",111,3,36.333333333333336,65,0,0,27,12,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,2,7.0,7,2,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,2,5,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813
HumanEval/22,gpt4,"    return [value for value in values if isinstance(value, int)]
","return [value for value in values if isinstance(value, int)]",60,1,60.0,60,0,0,12,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,3,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/23,gpt4,"    return len(string)
",return len(string),18,1,18.0,18,0,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/24,gpt4,"    for i in range(n-1, 0, -1):
        if n % i == 0:
            return i
    return None
","for i in range(n-1, 0, -1):
    if n % i == 0:
        return i
return None",75,4,18.0,27,4,0,40,28,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,1,0,0.0,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,3,4,5,19.60964047443681,34.86917501586544,2.8,97.63369004442322,5.424093891356845,0.011623058338621813
HumanEval/25,gpt4,"    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors
","i = 2
factors = []
while i * i <= n:
    if n % i:
        i += 1
    else:
        n //= i
        factors.append(i)
if n > 1:
    factors.append(n)
return factors",164,11,14.0,25,3,0,100,80,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,2,2,4.0,7,2,1,2,1,0,0,0,0,0,1,0,0,0,0,2,4,6,4,23.509775004326936,59.794705707972525,9.0,538.1523513717527,29.897352853986263,0.019931568569324175
HumanEval/26,gpt4,"    counts = {}
    for number in numbers:
        if number in counts:
            counts[number] += 1
        else:
            counts[number] = 1

    return [number for number in numbers if counts[number] == 1]
","counts = {}
for number in numbers:
    if number in counts:
        counts[number] += 1
    else:
        counts[number] = 1

return [number for number in numbers if counts[number] == 1]",186,8,25.571428571428573,60,3,1,73,52,0,0,0,0,0,0,0,2,0,0,3,0,0,0,2,0,1,2,10.0,14,0,1,1,1,0,1,0,0,0,0,1,0,0,0,0,5,3,5,16.36452797660028,27.0,1.8,48.6,2.7,0.009
HumanEval/27,gpt4,"    return string.swapcase()
",return string.swapcase(),24,1,24.0,24,0,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/28,gpt4,"    return ''.join(strings)
",return ''.join(strings),23,1,23.0,23,0,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/29,gpt4,"    return [s for s in strings if s.startswith(prefix)]
",return [s for s in strings if s.startswith(prefix)],51,1,51.0,51,0,0,11,4,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,3,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/30,gpt4,"    return [i for i in l if i > 0]
",return [i for i in l if i > 0],30,1,30.0,30,1,0,13,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0.0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,3,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/31,gpt4,"    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
","if n <= 1:
    return False
elif n <= 3:
    return True
elif n % 2 == 0 or n % 3 == 0:
    return False
i = 5
while i * i <= n:
    if n % i == 0 or n % (i + 2) == 0:
        return False
    i += 6
return True",211,12,16.666666666666668,38,11,0,120,76,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,7,1,1.0,1,0,1,4,5,0,0,0,0,0,0,0,0,0,0,0,8,6,17,84.99664330558272,217.13097389073664,5.647058823529412,1226.1513819712188,68.11952122062327,0.07237699129691222
HumanEval/32,gpt4,"    MAX_ITERATIONS = 10000
    TOLERANCE = 1e-6
    x = 0.0  # initial guess
    for _ in range(MAX_ITERATIONS):
        f_x = poly(xs, x)
        if abs(f_x) < TOLERANCE:  # found a root
            return x
        f_prime_x = poly(poly_derivative(xs), x)
        if f_prime_x == 0:  # derivative is zero, Newton's method fails
            raise ValueError(""Newton's method failed"")
        x -= f_x / f_prime_x  # Newton's method update
    raise ValueError(""Exceeded maximum iterations"")
    def poly(xs: list, x: float):
        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])
    def poly_derivative(xs):
        return [i*coeff for i, coeff in enumerate(xs)][1:]

","MAX_ITERATIONS = 10000
TOLERANCE = 1e-6
x = 0.0
for _ in range(MAX_ITERATIONS):
    f_x = poly(xs, x)
    if abs(f_x) < TOLERANCE:
        return x
    f_prime_x = poly(poly_derivative(xs), x)
    if f_prime_x == 0:
        raise ValueError(""Newton's method failed"")
    x -= f_x / f_prime_x
raise ValueError(""Exceeded maximum iterations"")
def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])
def poly_derivative(xs):
    return [i*coeff for i, coeff in enumerate(xs)][1:]
",521,16,31.5625,70,11,0,182,108,2,0,0,0,0,0,0,5,0,0,3,0,0,2,3,0,2,5,6.75,14,11,1,2,3,2,2,0,0,0,0,0,0,2,0,1,4,5,11,49.663388279447084,72.0,2.727272727272727,196.36363636363635,10.909090909090908,0.024
HumanEval/33,gpt4,"    # Extract the elements at indices divisible by three
    l_third = [l[i] for i in range(len(l)) if i % 3 == 0]

    # Sort the extracted elements
    l_third.sort()

    # Create a new list l' with elements from l at indices not divisible by three and sorted elements at indices divisible by three
    l_prime = [l_third.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]

    return l_prime
","l_third = [l[i] for i in range(len(l)) if i % 3 == 0]

l_third.sort()

l_prime = [l_third.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]

return l_prime",160,7,38.5,73,5,3,90,28,0,0,0,0,0,0,0,3,0,0,2,0,0,0,2,0,2,2,7.0,7,6,0,0,1,0,2,0,0,0,0,0,0,0,0,2,5,2,5,13.60964047443681,33.68825906469125,1.6,53.901214503506004,2.9945119168614447,0.011229419688230418
HumanEval/34,gpt4,"    return sorted(set(l))
",return sorted(set(l)),21,1,21.0,21,0,0,5,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0.0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/35,gpt4,"    if len(l) == 0:  # Check if the list is empty
        return None
    else:
        return max(l)
","if len(l) == 0:
    return None
else:
    return max(l)",55,4,13.0,17,1,0,37,24,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0.0,0,2,0,1,2,0,0,0,0,0,0,0,0,0,0,0,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/36,gpt4,"    count = 0
    for i in range(n):
        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):
            count += str(i).count('7')
    return count
","count = 0
for i in range(n):
    if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):
        count += str(i).count('7')
return count",131,5,25.4,54,9,0,55,32,0,0,0,0,0,0,0,2,1,0,2,0,0,0,1,0,2,1,5.0,5,4,1,1,1,0,0,0,0,0,0,0,0,0,0,1,5,6,14,68.81274391313339,103.72627427729671,3.4285714285714284,355.63294037930297,19.757385576627943,0.0345754247590989
HumanEval/37,gpt4,"    # Extract the values from the even indices
    even_indices_values = [l[i] for i in range(len(l)) if i % 2 == 0]
    # Sort the values
    even_indices_values.sort()

    # Create a new list l' that matches the required criteria
    new_l = [even_indices_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]

    return new_l
","even_indices_values = [l[i] for i in range(len(l)) if i % 2 == 0]
even_indices_values.sort()

new_l = [even_indices_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]

return new_l",191,6,46.5,83,5,2,75,28,0,0,0,0,0,0,0,3,0,0,2,0,0,0,2,0,2,2,12.0,19,6,0,0,1,0,2,0,0,0,0,0,0,0,0,2,5,2,5,13.60964047443681,33.68825906469125,1.6,53.901214503506004,2.9945119168614447,0.011229419688230418
HumanEval/38,gpt4,"    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group in reverse. Unless group has fewer elements than 3.
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)
    def encode_cyclic(s: str):
        # split string to groups. Each of length 3.
        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
        # cycle elements in each group. Unless group has fewer elements than 3.
        groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
        return """".join(groups)

","groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
return """".join(groups)
def encode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)
",417,7,58.57142857142857,87,16,0,172,64,1,0,0,0,0,0,0,4,0,0,4,0,0,0,4,0,2,1,6.0,6,12,0,0,2,0,4,0,0,0,0,0,0,1,0,2,4,5,19,92.32026322986493,210.90827503317323,3.9473684210526314,832.5326646046311,46.251814700257285,0.07030275834439108
HumanEval/39,gpt4,"    def is_prime(num: int) -> bool:
        if num <= 1:
            return False
        if num == 2:
            return True
        if num % 2 == 0:
            return False
        i = 3
        while i * i <= num:
            if num % i == 0:
                return False
            i += 2
        return True

    fib1, fib2 = 0, 1
    count = 0

    while count < n:
        fib1, fib2 = fib2, fib1 + fib2
        if is_prime(fib2):
            count += 1

    return fib2
","def is_prime(num: int) -> bool:
    if num <= 1:
        return False
    if num == 2:
        return True
    if num % 2 == 0:
        return False
    i = 3
    while i * i <= num:
        if num % i == 0:
            return False
        i += 2
    return True

fib1, fib2 = 0, 1
count = 0

while count < n:
    fib1, fib2 = fib2, fib1 + fib2
    if is_prime(fib2):
        count += 1

return fib2",400,23,18.9,34,20,3,225,172,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,3,6.0,12,1,2,5,6,0,0,0,0,0,0,0,0,1,0,0,3,6,13,63.61549134016113,152.92539048396907,5.538461538461538,846.9713934496748,47.05396630275971,0.050975130161323025
HumanEval/40,gpt4,"    l_len = len(l)
    if l_len < 3:
        return False
    for i in range(l_len - 2):
        for j in range(i + 1, l_len - 1):
            for k in range(j + 1, l_len):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","l_len = len(l)
if l_len < 3:
    return False
for i in range(l_len - 2):
    for j in range(i + 1, l_len - 1):
        for k in range(j + 1, l_len):
            if l[i] + l[j] + l[k] == 0:
                return True
return False",229,9,24.555555555555557,39,6,0,114,80,0,0,0,0,0,0,0,3,0,0,3,0,0,0,3,0,2,1,5.0,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,6,4,12,51.01955000865388,96.0,2.6666666666666665,256.0,14.222222222222221,0.032
HumanEval/41,gpt4,"    return n * n
",return n * n,12,1,12.0,12,0,0,7,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0.0,3.0,1.0,3.0,0.16666666666666666,0.001
HumanEval/42,gpt4,"    return [i + 1 for i in l]
",return [i + 1 for i in l],25,1,25.0,25,1,0,11,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/43,gpt4,"    # Use a set for O(1) lookups
    lookup = set()

    # Loop over the list
    for num in l:
        # If the negative of the current number is in the lookup set, we have a pair that sums to zero
        if -num in lookup:
            return True
        # Otherwise, add the current number to the lookup set
        lookup.add(num)

    # If we get to the end of the list without finding a pair that sums to zero, return False
    return False
","lookup = set()

for num in l:
    if -num in lookup:
        return True
    lookup.add(num)

return False",106,8,16.5,22,0,2,136,68,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,1,6.0,6,2,1,1,2,0,0,0,0,0,0,0,0,0,0,1,3,2,3,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034
HumanEval/44,gpt4,"    # Initialize an empty string to store the result
    result = """"

    # Continue until x becomes 0
    while x > 0:
        # Add the remainder when x is divided by base to the result
        result = str(x % base) + result
        # Update x by doing integer division by base
        x = x // base

    # If x was 0, return '0'
    return result if result else '0'
","result = """"

while x > 0:
    result = str(x % base) + result
    x = x // base

return result if result else '0'",113,7,21.4,35,2,2,115,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,3.5,6,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,3,4,5,19.60964047443681,38.03910001730775,3.2,121.72512005538482,6.762506669743601,0.012679700005769252
HumanEval/45,gpt4,"    return 0.5 * a * h
",return 0.5 * a * h,18,1,18.0,18,2,0,9,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,4,8.0,13.931568569324174,0.5,6.965784284662087,0.3869880158145604,0.004643856189774725
HumanEval/46,gpt4,"    if n < 0:
        raise ValueError(""Negative arguments are not supported"")

    # Base cases
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0

    # Initialize base values
    a, b, c, d = 0, 0, 2, 0

    for _ in range(n - 3):
        a, b, c, d = b, c, d, a + b + c + d

    return d
","if n < 0:
    raise ValueError(""Negative arguments are not supported"")

if n == 0:
    return 0
elif n == 1:
    return 0
elif n == 2:
    return 2
elif n == 3:
    return 0

a, b, c, d = 0, 0, 2, 0

for _ in range(n - 3):
    a, b, c, d = b, c, d, a + b + c + d

return d",272,18,18.214285714285715,60,14,4,145,88,0,0,0,0,0,0,1,3,0,0,1,0,0,1,1,0,5,1,12.0,12,2,1,5,5,1,0,0,0,0,0,0,0,0,0,0,7,4,11,46.053747805010275,105.48604608143,3.272727272727273,345.22705990286187,19.179281105714548,0.03516201536047667
HumanEval/47,gpt4,"    l.sort()
    n = len(l)

    if n % 2 == 0:
        median1 = l[n // 2]
        median2 = l[n // 2 - 1]
        median = (median1 + median2) / 2
    else:
        median = l[n // 2]

    return median
","l.sort()
n = len(l)

if n % 2 == 0:
    median1 = l[n // 2]
    median2 = l[n // 2 - 1]
    median = (median1 + median2) / 2
else:
    median = l[n // 2]

return median",168,11,17.555555555555557,36,11,2,80,52,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,4,4.666666666666667,7,2,0,1,1,0,0,0,0,0,0,0,0,0,0,1,2,6,9,44.039100017307746,93.76537429460444,5.333333333333333,500.08199623789034,27.78233312432724,0.03125512476486815
HumanEval/48,gpt4,"    # Removing case sensitivity by converting the string to lowercase
    text = text.lower()

    # Compare the string with its reversed version
    return text == text[::-1]
","text = text.lower()

return text == text[::-1]",46,3,22.0,25,1,1,37,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4.0,4,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,2,3,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034
HumanEval/49,gpt4,"    return pow(2, n, p)
","return pow(2, n, p)",19,1,19.0,19,1,0,7,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/50,gpt4,"    return """".join([chr(((ord(ch) - ord(""a"") - 5) % 26) + ord(""a"")) if ch.isalpha() else ch for ch in s.lower()])
    def encode_shift(s: str) -> str:
        return """".join([chr(((ord(ch) - ord(""a"") + 5) % 26) + ord(""a"")) if ch.isalpha() else ch for ch in s.lower()])

","return """".join([chr(((ord(ch) - ord(""a"") - 5) % 26) + ord(""a"")) if ch.isalpha() else ch for ch in s.lower()])
def encode_shift(s: str) -> str:
    return """".join([chr(((ord(ch) - ord(""a"") + 5) % 26) + ord(""a"")) if ch.isalpha() else ch for ch in s.lower()])
",257,3,84.66666666666667,113,6,0,54,16,1,0,0,0,0,0,0,8,0,0,2,0,0,0,2,0,1,0,0.0,0,14,0,0,2,0,2,0,0,0,0,0,0,1,0,6,3,3,16,68.75488750216347,101.95026032264605,1.5,152.92539048396907,8.49585502688717,0.03398342010754868
HumanEval/51,gpt4,"    vowels = 'aeiouAEIOU'
    return ''.join([char for char in text if char not in vowels])
","vowels = 'aeiouAEIOU'
return ''.join([char for char in text if char not in vowels])",83,2,41.0,61,0,0,20,8,0,0,0,0,0,0,1,1,0,0,2,0,0,0,1,0,0,1,6.0,6,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,3,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/52,gpt4,"    return all(num < t for num in l)
",return all(num < t for num in l),32,1,32.0,32,0,0,11,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0.0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/53,gpt4,"    return x + y
",return x + y,12,1,12.0,12,0,0,7,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/54,gpt4,"    return set(s0) == set(s1)
",return set(s0) == set(s1),25,1,25.0,25,2,0,7,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0.0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/55,gpt4,"    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)
","if n == 0:
    return 0
elif n == 1:
    return 1
else:
    return fib(n - 1) + fib(n - 2)",90,6,14.166666666666666,34,6,0,51,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0.0,0,2,0,2,3,0,0,0,0,0,0,0,0,0,0,0,3,3,6,20.264662506490406,47.548875021634686,2.5,118.87218755408671,6.604010419671484,0.01584962500721156
HumanEval/56,gpt4,"    stack = []
    for bracket in brackets:
        if bracket == '<':
            stack.append(bracket)
        elif bracket == '>':
            if not stack:
                return False
            stack.pop()
    return len(stack) == 0
","stack = []
for bracket in brackets:
    if bracket == '<':
        stack.append(bracket)
    elif bracket == '>':
        if not stack:
            return False
        stack.pop()
return len(stack) == 0",203,9,21.666666666666668,29,1,0,97,80,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,5,1,5.0,5,3,1,3,2,0,0,0,0,0,1,0,0,0,0,2,5,2,6,17.509775004326936,33.0,1.1666666666666667,38.5,2.138888888888889,0.011
HumanEval/57,gpt4,"    if len(l) < 2:  # if the list has less than two elements, it is considered monotonic
        return True

    is_increasing = l[1] > l[0]  # check the direction of the first two elements

    for i in range(2, len(l)):
        if (is_increasing and l[i] < l[i-1]) or (not is_increasing and l[i] > l[i-1]):
            return False  # return False as soon as the direction changes

    return True  # if we've gotten through the whole list without returning, it's monotonic
","if len(l) < 2:
    return True

is_increasing = l[1] > l[0]

for i in range(2, len(l)):
    if (is_increasing and l[i] < l[i-1]) or (not is_increasing and l[i] > l[i-1]):
        return False

return True  # if we've gotten through the whole list without returning, it's monotonic",280,10,38.714285714285715,87,6,3,117,44,0,0,0,1,0,0,2,2,2,0,1,0,0,0,1,0,4,1,13.0,13,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,7,6,16,79.50977500432694,129.32351694048162,3.5625,460.7150291004658,25.595279394470325,0.04310783898016054
HumanEval/58,gpt4,"    # use set intersection to find common elements and sorted to order them
    return sorted(set(l1) & set(l2))
",return sorted(set(l1) & set(l2)),32,1,32.0,32,2,0,23,8,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0.0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/59,gpt4,"    # Divide by 2 until n is odd
    while n % 2 == 0:
        largest_prime = 2
        n /= 2

    # Try odd numbers up to sqrt(n)
    p = 3
    while p * p <= n:
        if n % p:
            p += 2
        else:
            largest_prime = p
            n /= p

    # If n is a prime number greater than 2
    if n > 2:
        largest_prime = n

    return int(largest_prime)
","while n % 2 == 0:
    largest_prime = 2
    n /= 2

p = 3
while p * p <= n:
    if n % p:
        p += 2
    else:
        largest_prime = p
        n /= p

if n > 2:
    largest_prime = n

return int(largest_prime)",215,16,15.384615384615385,25,7,3,161,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,2,7.0,13,1,2,2,1,0,0,0,0,0,0,0,0,0,0,0,5,7,6,35.161259458730164,99.91187238980949,10.5,1049.0746600929997,58.28192556072221,0.03330395746326983
HumanEval/60,gpt4,"    return n * (n + 1) // 2
",return n * (n + 1) // 2,23,1,23.0,23,2,0,11,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,3,5,16.36452797660028,27.0,1.8,48.6,2.7,0.009
HumanEval/61,gpt4,"    stack = []
    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')':
            if not stack:
                return False
            stack.pop()
    return len(stack) == 0
","stack = []
for bracket in brackets:
    if bracket == '(':
        stack.append(bracket)
    elif bracket == ')':
        if not stack:
            return False
        stack.pop()
return len(stack) == 0",203,9,21.666666666666668,29,1,0,97,80,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,3,1,5.0,5,3,1,3,2,0,0,0,0,0,1,0,0,0,0,2,5,2,6,17.509775004326936,33.0,1.1666666666666667,38.5,2.138888888888889,0.011
HumanEval/62,gpt4,"    return [i*x for i, x in enumerate(xs)][1:]
","return [i*x for i, x in enumerate(xs)][1:]",42,1,42.0,42,1,0,10,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/63,gpt4,"    if n < 0:
        raise ValueError(""n must be a non-negative integer"")

    # Base cases
    if n == 0 or n == 1:
        return 0
    if n == 2:
        return 1

    fibfib = [0, 0, 1] + [0]*(n-2) # Preallocate list

    # Compute the fibfib numbers
    for i in range(3, n+1):
        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]

    return fibfib[n]
","if n < 0:
    raise ValueError(""n must be a non-negative integer"")

if n == 0 or n == 1:
    return 0
if n == 2:
    return 1

fibfib = [0, 0, 1] + [0]*(n-2)

for i in range(3, n+1):
    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]

return fibfib[n]",256,14,24.3,56,16,4,111,64,0,0,0,0,0,0,0,3,0,0,1,0,0,1,1,0,4,2,7.5,9,2,1,3,3,1,0,0,0,0,2,0,0,0,0,0,6,6,16,79.50977500432694,187.29612798276648,5.25,983.304671909524,54.62803732830689,0.06243204266092216
HumanEval/64,gpt4,"    vowels = 'aeiou'
    count = sum(1 for char in s if char.lower() in vowels)
    if s and s[-1].lower() == 'y':
        count += 1
    return count
","vowels = 'aeiou'
count = sum(1 for char in s if char.lower() in vowels)
if s and s[-1].lower() == 'y':
    count += 1
return count",130,5,25.2,54,3,0,44,24,0,0,0,0,0,0,0,1,1,0,2,0,0,0,1,0,1,2,5.5,6,3,0,1,1,0,0,0,0,0,0,0,0,0,1,2,5,5,8,35.60964047443681,51.80615605397529,2.8125,145.70481390180552,8.09471188343364,0.01726871868465843
HumanEval/65,gpt4,"    # Convert the integer to a string to get the digits
    str_x = str(x)
    n = len(str_x)

    # If shift is greater than number of digits, return reversed digits
    if shift > n:
        return str_x[::-1]

    # Calculate the actual shift
    actual_shift = shift % n

    # Perform the circular shift
    shifted_str_x = str_x[-actual_shift:] + str_x[:-actual_shift]

    return shifted_str_x
","str_x = str(x)
n = len(str_x)

if shift > n:
    return str_x[::-1]

actual_shift = shift % n

shifted_str_x = str_x[-actual_shift:] + str_x[:-actual_shift]

return shifted_str_x",178,11,24.0,61,1,4,94,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,7.75,13,2,0,1,2,0,0,0,0,0,0,0,0,0,0,0,2,4,6,23.509775004326936,49.82892142331044,3.0,149.4867642699313,8.304820237218406,0.016609640474436815
HumanEval/66,gpt4,"    return sum(ord(c) for c in s if c.isupper())
",return sum(ord(c) for c in s if c.isupper()),44,1,44.0,44,0,0,11,4,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,0.0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,1,1,3,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/67,gpt4,"    # Extract all the numbers from the string using regular expressions
    numbers = re.findall(r'\d+', s)
    # Convert the numbers to integers and sum them up
    sum_fruits = sum(int(num) for num in numbers)
    # Subtract the sum from the total number of fruits to get the number of mangoes
    return n - sum_fruits
","numbers = re.findall(r'\d+', s)
sum_fruits = sum(int(num) for num in numbers)
return n - sum_fruits",99,3,32.333333333333336,45,0,0,70,24,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,2,8.5,10,3,0,0,1,0,0,0,0,0,0,0,0,0,1,1,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/68,gpt4,"    smallest_even = float('inf')
    index = -1
    for i, num in enumerate(arr):
        if num % 2 == 0 and num < smallest_even:
            smallest_even = num
            index = i
    return [smallest_even, index] if smallest_even != float('inf') else []
","smallest_even = float('inf')
index = -1
for i, num in enumerate(arr):
    if num % 2 == 0 and num < smallest_even:
        smallest_even = num
        index = i
return [smallest_even, index] if smallest_even != float('inf') else []",231,7,32.142857142857146,70,3,0,77,48,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,3,2,9.0,13,3,1,1,1,0,0,0,0,0,2,0,0,0,0,0,5,6,9,44.039100017307746,66.41714012534482,3.6666666666666665,243.52951379293097,13.52941743294061,0.02213904670844827
HumanEval/69,gpt4,"    # Count the frequency of each integer
    counter = Counter(lst)

    # Sort the counter by keys in descending order
    sorted_counter = dict(sorted(counter.items(), key=lambda item: item[0], reverse=True))

    # Search for the greatest integer with frequency greater or equal to its value
    for num, freq in sorted_counter.items():
        if freq >= num:
            return num

    # Return -1 if no such integer found
    return -1
","counter = Counter(lst)

sorted_counter = dict(sorted(counter.items(), key=lambda item: item[0], reverse=True))

for num, freq in sorted_counter.items():
    if freq >= num:
        return num

return -1",202,9,32.333333333333336,86,2,3,103,52,0,0,0,0,0,0,0,4,0,0,1,0,0,0,1,0,1,2,10.5,14,5,1,1,2,0,0,0,0,0,0,0,0,1,0,2,3,2,3,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034
HumanEval/70,gpt4,"    sorted_lst = []
    while lst:
        sorted_lst.append(min(lst))
        lst.remove(min(lst))
        if lst:  # Check if list is not empty after removing min
            sorted_lst.append(max(lst))
            lst.remove(max(lst))
    return sorted_lst
","sorted_lst = []
while lst:
    sorted_lst.append(min(lst))
    lst.remove(min(lst))
    if lst:
        sorted_lst.append(max(lst))
        lst.remove(max(lst))
return sorted_lst",178,8,21.375,35,0,0,76,60,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,1,10.0,10,8,1,1,1,0,0,0,0,0,1,0,0,0,0,4,3,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/71,gpt4,"    # Check if the sides form a valid triangle
    if (a + b > c) and (a + c > b) and (b + c > a):
        # Compute the semi-perimeter
        s = (a + b + c) / 2
        # Calculate the area using Heron's formula and round it to 2 decimal places
        area = round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)
        return area
    else:
        return -1
","if (a + b > c) and (a + c > b) and (b + c > a):
    s = (a + b + c) / 2
    area = round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)
    return area
else:
    return -1",171,6,27.666666666666668,63,3,0,126,60,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,2,2.5,4,2,0,1,2,0,0,0,0,0,0,0,0,0,0,1,4,7,19,100.36210720983135,239.7224256251957,6.2631578947368425,1501.41940259991,83.41218903332833,0.07990747520839857
HumanEval/72,gpt4,"    # Check if the list q is palindromic (balanced)
    if q == q[::-1]:
        # Check if the sum of the elements in q is less than or equal to w
        if sum(q) <= w:
            return True
    return False
","if q == q[::-1]:
    if sum(q) <= w:
        return True
return False",69,4,16.5,19,1,0,72,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0.0,0,1,0,2,2,0,0,0,0,0,0,0,0,0,0,0,3,3,5,16.36452797660028,24.0,1.5,36.0,2.0,0.008
HumanEval/73,gpt4,"    start = 0
    end = len(arr) - 1
    changes = 0

    while start <= end:
        if arr[start] != arr[end]:
            changes += 1
        start += 1
        end -= 1

    return changes
","start = 0
end = len(arr) - 1
changes = 0

while start <= end:
    if arr[start] != arr[end]:
        changes += 1
    start += 1
    end -= 1

return changes",157,11,16.333333333333332,30,6,2,77,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,5.0,7,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,4,7,27.651484454403228,62.26976913547136,3.4285714285714284,213.49635132161606,11.860908406756447,0.020756589711823786
HumanEval/74,gpt4,"    # Calculate the total number of chars in lst1
    lst1_total_chars = sum(len(item) for item in lst1)

    # Calculate the total number of chars in lst2
    lst2_total_chars = sum(len(item) for item in lst2)

    # Return the list with fewer chars, or lst1 if they have the same number of chars
    if lst1_total_chars <= lst2_total_chars:
        return lst1
    else:
        return lst2
","lst1_total_chars = sum(len(item) for item in lst1)

lst2_total_chars = sum(len(item) for item in lst2)

if lst1_total_chars <= lst2_total_chars:
    return lst1
else:
    return lst2",182,8,29.166666666666668,50,8,2,93,44,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,1,2,16.0,16,4,0,1,2,0,0,0,0,0,0,0,0,0,2,0,4,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/75,gpt4,"    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    primes = [i for i in range(2, a) if is_prime(i)]
    for i in primes:
        for j in primes:
            for k in primes:
                if i * j * k == a:
                    return True
    return False
","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

primes = [i for i in range(2, a) if is_prime(i)]
for i in primes:
    for j in primes:
        for k in primes:
            if i * j * k == a:
                return True
return False",340,15,23.285714285714285,48,7,1,181,136,1,0,0,0,0,0,0,5,0,0,5,0,0,0,5,0,3,1,6.0,6,4,4,3,5,0,1,0,0,0,0,0,0,1,0,0,7,6,14,68.81274391313339,103.72627427729671,3.4285714285714284,355.63294037930297,19.757385576627943,0.0345754247590989
HumanEval/76,gpt4,"    if x == 1:
        return True
    if n == 1:
        return False
    if x == 0 or n == 0:
        return False

    log_value = math.log(x, n)
    return math.isclose(log_value, round(log_value))
","if x == 1:
    return True
if n == 1:
    return False
if x == 0 or n == 0:
    return False

log_value = math.log(x, n)
return math.isclose(log_value, round(log_value))",169,9,20.125,48,4,1,65,44,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,4,1,9.0,9,3,0,3,4,0,0,0,0,0,0,0,0,0,0,2,5,2,6,17.509775004326936,45.0,1.6666666666666667,75.0,4.166666666666667,0.015
HumanEval/77,gpt4,"    cube_root = abs(a) ** (1/3)
    return round(cube_root) ** 3 == abs(a)
","cube_root = abs(a) ** (1/3)
return round(cube_root) ** 3 == abs(a)",66,2,32.5,38,3,0,17,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,9.0,9,3,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,3,7,24.406371956566698,39.863137138648355,1.7142857142857142,68.33680652339717,3.796489251299843,0.013287712379549451
HumanEval/78,gpt4,"    # Define the prime hexadecimal digits
    prime_hex_digits = set('2357BD')

    # Initialize a counter
    count = 0

    # Check each character in the input string
    for char in num:
        # If the character is a prime hexadecimal digit, increment the counter
        if char in prime_hex_digits:
            count += 1

    # Return the count
    return count
","prime_hex_digits = set('2357BD')

count = 0

for char in num:
    if char in prime_hex_digits:
        count += 1

return count",127,9,19.833333333333332,32,6,3,102,60,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,2,10.5,16,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/79,gpt4,"    binary = bin(decimal)[2:]  # Convert to binary and remove '0b' prefix
    return ""db"" + binary + ""db""
","binary = bin(decimal)[2:]
return ""db"" + binary + ""db""",53,2,26.0,27,1,0,24,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6.0,6,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,3,4.754887502163469,12.0,0.6666666666666666,8.0,0.4444444444444444,0.004
HumanEval/80,gpt4,"    if len(s) < 3:
        return False
    else:
        for i in range(len(s) - 2):
            if len(set(s[i:i+3])) != 3:
                return False
        return True
","if len(s) < 3:
    return False
else:
    for i in range(len(s) - 2):
        if len(set(s[i:i+3])) != 3:
            return False
    return True",146,7,20.0,35,4,0,74,60,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,2,0,0.0,0,5,1,2,3,0,0,0,0,0,0,0,0,0,0,0,4,4,6,23.509775004326936,39.863137138648355,2.6666666666666665,106.3016990363956,5.905649946466422,0.013287712379549451
HumanEval/81,gpt4,"    letter_grades = []

    for grade in grades:
        if grade == 4.0:
            letter_grades.append('A+')
        elif grade > 3.7:
            letter_grades.append('A')
        elif grade > 3.3:
            letter_grades.append('A-')
        elif grade > 3.0:
            letter_grades.append('B+')
        elif grade > 2.7:
            letter_grades.append('B')
        elif grade > 2.3:
            letter_grades.append('B-')
        elif grade > 2.0:
            letter_grades.append('C+')
        elif grade > 1.7:
            letter_grades.append('C')
        elif grade > 1.3:
            letter_grades.append('C-')
        elif grade > 1.0:
            letter_grades.append('D+')
        elif grade > 0.7:
            letter_grades.append('D')
        elif grade > 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')

    return letter_grades
","letter_grades = []

for grade in grades:
    if grade == 4.0:
        letter_grades.append('A+')
    elif grade > 3.7:
        letter_grades.append('A')
    elif grade > 3.3:
        letter_grades.append('A-')
    elif grade > 3.0:
        letter_grades.append('B+')
    elif grade > 2.7:
        letter_grades.append('B')
    elif grade > 2.3:
        letter_grades.append('B-')
    elif grade > 2.0:
        letter_grades.append('C+')
    elif grade > 1.7:
        letter_grades.append('C')
    elif grade > 1.3:
        letter_grades.append('C-')
    elif grade > 1.0:
        letter_grades.append('D+')
    elif grade > 0.7:
        letter_grades.append('D')
    elif grade > 0.0:
        letter_grades.append('D-')
    else:
        letter_grades.append('E')

return letter_grades",785,31,26.03448275862069,34,24,2,314,272,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,12,1,13.0,13,13,1,12,1,0,0,0,0,0,1,0,0,0,0,13,14,2,13,50.105716335834195,140.64806144190666,1.8461538461538463,259.65795958505845,14.425442199169915,0.04688268714730222
HumanEval/82,gpt4,"    n = len(string)
    if n == 1 or n == 0:
        return False
    elif n == 2:
        return True
    else:
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True
","n = len(string)
if n == 1 or n == 0:
    return False
elif n == 2:
    return True
else:
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",192,10,18.3,39,8,0,103,76,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,4,1,1.0,1,3,1,3,4,0,0,0,0,0,0,0,0,0,0,0,6,5,10,44.82892142331043,93.76537429460444,4.0,375.06149717841777,20.836749843245432,0.03125512476486815
HumanEval/83,gpt4,"    if n == 1:
        return 1  # Only one 1-digit number starts and ends with 1
    return 10**(n-1) + 9 * 10**(n-2) - 10**(n-2)

","if n == 1:
    return 1
return 10**(n-1) + 9 * 10**(n-2) - 10**(n-2)
",69,3,22.0,44,12,0,38,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0.0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,2,5,13,59.715356810271004,125.09775004326937,3.8461538461538463,481.145192474113,26.730288470784057,0.04169925001442312
HumanEval/84,gpt4,"    sum = 0
    while N != 0:
        sum += N % 10
        N //= 10
    return bin(sum).replace(""0b"", """")

","sum = 0
while N != 0:
    sum += N % 10
    N //= 10
return bin(sum).replace(""0b"", """")
",87,5,16.4,33,7,0,41,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3.0,3,2,1,0,1,0,0,0,0,0,0,0,0,0,0,1,2,4,5,19.60964047443681,38.03910001730775,3.2,121.72512005538482,6.762506669743601,0.012679700005769252
HumanEval/85,gpt4,"    return sum(i for index, i in enumerate(lst) if index % 2 != 0 and i % 2 == 0)
","return sum(i for index, i in enumerate(lst) if index % 2 != 0 and i % 2 == 0)",77,1,77.0,77,4,0,22,4,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,2,0,0.0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4,4,8,32.0,53.77443751081735,2.5,134.43609377704337,7.468671876502409,0.017924812503605784
HumanEval/86,gpt4,"    # Split the string into words
    words = s.split(' ')

    # For each word, sort the characters based on their ASCII values
    sorted_words = [''.join(sorted(word)) for word in words]

    # Join the sorted words together with spaces and return the result
    return ' '.join(sorted_words)
","words = s.split(' ')

sorted_words = [''.join(sorted(word)) for word in words]

return ' '.join(sorted_words)",109,5,35.0,56,0,2,62,24,0,0,0,0,0,0,0,10,0,0,1,0,0,0,1,0,0,2,8.5,12,4,0,0,1,0,1,0,0,0,0,0,0,0,0,3,2,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/87,gpt4,"    coords = []
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            if lst[i][j] == x:
                coords.append((i, j))
    coords.sort(key=lambda x: (x[0], -x[1]))
    return coords
","coords = []
for i in range(len(lst)):
    for j in range(len(lst[i])):
        if lst[i][j] == x:
            coords.append((i, j))
coords.sort(key=lambda x: (x[0], -x[1]))
return coords",186,7,25.714285714285715,40,2,0,68,52,0,0,0,0,0,0,0,7,0,0,2,0,0,0,2,0,1,1,6.0,6,6,2,1,1,0,0,0,0,0,1,0,0,1,0,2,4,2,3,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034
HumanEval/88,gpt4,"    if len(array) == 0 or len(array) == 1:
        return array
    else:
        sum_edge_values = array[0] + array[-1]
        copy_array = array.copy()
        if sum_edge_values % 2 == 0:
            copy_array.sort(reverse=True)
        else:
            copy_array.sort()
        return copy_array
","if len(array) == 0 or len(array) == 1:
    return array
else:
    sum_edge_values = array[0] + array[-1]
    copy_array = array.copy()
    if sum_edge_values % 2 == 0:
        copy_array.sort(reverse=True)
    else:
        copy_array.sort()
    return copy_array",263,10,25.4,42,6,0,100,80,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,3,2,12.5,15,5,0,2,2,0,0,0,0,0,0,0,0,0,0,3,4,5,11,49.663388279447084,80.0,2.9545454545454546,236.36363636363637,13.131313131313131,0.02666666666666667
HumanEval/89,gpt4,"    result = """"
    for c in s:
        if c.isalpha():
            start = ord('a') if c.islower() else ord('A')
            encrypted_char = chr(start + (ord(c) - start + 4) % 26)
            result += encrypted_char
        else:
            result += c
    return result
","result = """"
for c in s:
    if c.isalpha():
        start = ord('a') if c.islower() else ord('A')
        encrypted_char = chr(start + (ord(c) - start + 4) % 26)
        result += encrypted_char
    else:
        result += c
return result",238,9,25.555555555555557,63,3,0,103,76,0,0,0,0,0,0,0,4,0,0,1,0,0,0,1,0,0,3,8.333333333333334,14,6,1,1,1,0,0,0,0,0,0,0,0,0,0,2,4,3,10,37.974168451037094,66.60791492653966,1.8,119.8942468677714,6.660791492653967,0.022202638308846556
HumanEval/90,gpt4,"    if len(lst) < 2:
        return None
    lst = sorted(set(lst))
    if len(lst) < 2:
        return None
    return lst[1]
","if len(lst) < 2:
    return None
lst = sorted(set(lst))
if len(lst) < 2:
    return None
return lst[1]",102,6,16.166666666666668,22,3,0,43,32,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,2,1,3.0,3,4,0,2,3,0,0,0,0,0,0,0,0,0,0,0,3,1,3,4.754887502163469,12.0,0.6666666666666666,8.0,0.4444444444444444,0.004
HumanEval/91,gpt4,"    # First, split the string into sentences by splitting on '.', '?' and '!'.
    sentences = [sentence.split() for sentence in S.replace(
        '!', '.').replace('?', '.').split('.')]

    # Next, count the number of sentences that start with 'I'.
    boredom_count = sum(
        sentence[0] == 'I' for sentence in sentences if sentence)

    return boredom_count
","sentences = [sentence.split() for sentence in S.replace(
    '!', '.').replace('?', '.').split('.')]

boredom_count = sum(
    sentence[0] == 'I' for sentence in sentences if sentence)

return boredom_count",206,7,40.0,61,1,2,78,36,0,0,0,0,0,0,0,4,0,0,2,0,0,0,2,0,1,2,11.0,13,5,0,0,1,0,1,0,0,0,0,0,0,0,1,4,4,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/92,gpt4,"    # Check if all numbers are integers
    if all(isinstance(i, int) for i in [x, y, z]):
        # Check if one of the numbers is the sum of the other two
        if x == y + z or y == x + z or z == x + y:
            return True
    return False
","if all(isinstance(i, int) for i in [x, y, z]):
    if x == y + z or y == x + z or z == x + y:
        return True
return False",126,4,30.75,46,0,0,86,40,0,0,0,0,0,0,0,3,0,0,1,0,0,0,1,0,3,0,0.0,0,2,0,2,2,0,0,0,0,0,1,0,0,0,1,0,6,3,9,33.28421251514428,78.86917501586544,2.5,197.1729375396636,10.954052085536865,0.026289725005288478
HumanEval/93,gpt4,"    vowels = 'aeiouAEIOU'
    vowel_shift = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',
                   'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}
    encoded = ''

    for char in message:
        if char in vowels:
            encoded += vowel_shift[char].swapcase()
        else:
            encoded += char.swapcase()

    return encoded
","vowels = 'aeiouAEIOU'
vowel_shift = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',
               'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}
encoded = ''

for char in message:
    if char in vowels:
        encoded += vowel_shift[char].swapcase()
    else:
        encoded += char.swapcase()

return encoded",318,12,30.7,64,0,2,114,79,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,3,8.0,11,2,1,1,1,0,0,0,0,0,0,1,0,0,0,2,3,2,5,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813
HumanEval/94,gpt4,"    largest_prime_num = largest_prime(lst)
    return sum(int(digit) for digit in str(largest_prime_num))
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True

    def largest_prime(lst):
        lst.sort(reverse=True)
        for num in lst:
            if is_prime(num):
                return num
        return 0
","largest_prime_num = largest_prime(lst)
return sum(int(digit) for digit in str(largest_prime_num))
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def largest_prime(lst):
    lst.sort(reverse=True)
    for num in lst:
        if is_prime(num):
            return num
    return 0",504,22,23.0,58,12,1,251,192,2,0,0,0,0,0,0,5,0,0,2,0,0,0,2,1,7,2,9.0,17,6,2,5,8,0,0,0,0,0,0,0,0,2,1,1,2,6,17,84.99664330558272,217.13097389073664,5.647058823529412,1226.1513819712188,68.11952122062327,0.07237699129691222
HumanEval/95,gpt4,"    if not dict:  # check if the dictionary is empty
        return False

    keys = list(dict.keys())  # get the list of keys

    # check if all keys are strings, if not return False
    if not all(isinstance(key, str) for key in keys):
        return False

    # check if all keys are in lowercase or uppercase
    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)
","if not dict:
    return False

keys = list(dict.keys())

if not all(isinstance(key, str) for key in keys):
    return False

return all(key.islower() for key in keys) or all(key.isupper() for key in keys)",204,9,32.666666666666664,79,0,3,98,40,0,0,0,0,0,0,2,4,0,0,3,0,0,0,3,0,0,1,4.0,4,8,0,2,3,0,0,0,0,0,0,0,0,0,3,3,7,2,4,10.0,18.094737505048094,1.0,18.094737505048094,1.0052631947248942,0.006031579168349364
HumanEval/96,gpt4,"    if n < 2:
        return []

    sieve = [True] * n
    sieve[0] = sieve[1] = False

    for (i, is_prime) in enumerate(sieve):
        if is_prime:
            for j in range(i*i, n, i):
                sieve[j] = False

    return [i for (i, is_prime) in enumerate(sieve) if is_prime]
","if n < 2:
    return []

sieve = [True] * n
sieve[0] = sieve[1] = False

for (i, is_prime) in enumerate(sieve):
    if is_prime:
        for j in range(i*i, n, i):
            sieve[j] = False

return [i for (i, is_prime) in enumerate(sieve) if is_prime]",254,12,27.0,60,3,3,96,64,0,0,0,0,0,0,0,3,0,0,3,0,0,0,3,0,1,3,6.5,8,3,2,2,2,0,1,0,0,0,2,0,0,0,0,0,7,2,4,10.0,23.264662506490403,1.5,34.89699375973561,1.938721875540867,0.007754887502163467
HumanEval/97,gpt4,"    # Extract the unit digit of each number using the modulo operator
    unit_a = abs(a) % 10
    unit_b = abs(b) % 10

    # Return the product of the unit digits
    return unit_a * unit_b
","unit_a = abs(a) % 10
unit_b = abs(b) % 10

return unit_a * unit_b",65,4,20.666666666666668,22,4,1,49,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,6.0,6,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,2,5,13.60964047443681,25.26619429851844,1.2,30.319433158222125,1.6844129532345624,0.008422064766172813
HumanEval/98,gpt4,"    # Define the set of uppercase vowels
    uppercase_vowels = set('AEIOU')

    # Initialize a counter to keep track of uppercase vowels
    counter = 0

    # Iterate over the string, considering only even indices
    for i in range(0, len(s), 2):
        # If the character is an uppercase vowel, increment the counter
        if s[i] in uppercase_vowels:
            counter += 1

    # Return the counter
    return counter
","uppercase_vowels = set('AEIOU')

counter = 0

for i in range(0, len(s), 2):
    if s[i] in uppercase_vowels:
        counter += 1

return counter",145,9,22.833333333333332,32,4,3,111,60,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,2,11.5,16,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/99,gpt4,"    # Convert the input string to a float
    float_value = float(value)

    # Check if the decimal part of the number is 0.5 (equidistant from two integers)
    if float_value % 1 == 0.5 or float_value % 1 == -0.5:
        # If the number is positive, round up (away from zero)
        if float_value > 0:
            return int(float_value) + 1
        # If the number is negative, round down (away from zero)
        else:
            return int(float_value) - 1
    else:
        # For all other cases, round to the closest integer
        return round(float_value)
","float_value = float(value)

if float_value % 1 == 0.5 or float_value % 1 == -0.5:
    if float_value > 0:
        return int(float_value) + 1
    else:
        return int(float_value) - 1
else:
    return round(float_value)",223,9,26.875,53,9,1,165,92,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,3,1,11.0,11,4,0,2,3,0,0,0,0,0,0,0,0,0,0,0,4,7,11,57.705232259413506,108.41805003750011,5.409090909090909,586.4430888392052,32.58017160217807,0.036139350012500036
HumanEval/100,gpt4,"    pile = []
    for i in range(n):
        if n % 2 == 0:  # n is even
            pile.append(n + 2*i)
        else:  # n is odd
            pile.append(n + 2*i)
    return pile

","pile = []
for i in range(n):
    if n % 2 == 0:
        pile.append(n + 2*i)
    else:
        pile.append(n + 2*i)
return pile
",128,7,17.285714285714285,28,4,0,77,52,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,4.0,4,3,1,1,1,0,0,0,0,0,1,0,0,0,0,2,3,4,7,27.651484454403228,62.26976913547136,3.4285714285714284,213.49635132161606,11.860908406756447,0.020756589711823786
HumanEval/101,gpt4,"    # replace commas with spaces and then split the string into words
    words = s.replace(',', ' ').split()
    return words

","words = s.replace(',', ' ').split()
return words
",49,2,23.5,35,0,0,28,12,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,5.0,5,2,0,0,1,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/102,gpt4,"    # If y is smaller than x, there's no range, so return -1
    if y < x:
        return -1

    # If y is even, return y as it's the largest number in the range
    if y % 2 == 0:
        return y

    # If y is odd, subtract 1 from it to get the largest even number
    elif y - 1 >= x:
        return y - 1

    # If there are no even numbers in the range, return -1
    else:
        return -1
","if y < x:
    return -1

if y % 2 == 0:
    return y

elif y - 1 >= x:
    return y - 1

else:
    return -1",108,11,12.25,16,6,3,134,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0.0,0,0,0,3,4,0,0,0,0,0,0,0,0,0,0,0,4,6,7,35.161259458730164,81.40967379910403,6.0,488.45804279462413,27.136557933034673,0.027136557933034676
HumanEval/103,gpt4,"    if n > m:
        return -1
    else:
        # compute the average and round it to nearest integer
        avg = round((n + m) / 2)
        # convert to binary and return
        return bin(avg)
","if n > m:
    return -1
else:
    avg = round((n + m) / 2)
    return bin(avg)",78,5,14.8,28,2,0,73,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3.0,3,2,0,1,2,0,0,0,0,0,0,0,0,0,0,0,2,4,5,19.60964047443681,34.86917501586544,2.8,97.63369004442322,5.424093891356845,0.011623058338621813
HumanEval/104,gpt4,"    # Create a set of even digits as strings for comparison
    even_digits = {'0', '2', '4', '6', '8'}

    # Filter the list for numbers that don't contain any even digit
    no_even_digit_nums = [num for num in x if not any(
        (digit in str(num)) for digit in even_digits)]

    # Return the sorted list
    return sorted(no_even_digit_nums)
","even_digits = {'0', '2', '4', '6', '8'}

no_even_digit_nums = [num for num in x if not any(
    (digit in str(num)) for digit in even_digits)]

return sorted(no_even_digit_nums)",177,6,43.0,50,5,2,79,32,0,0,0,0,0,0,1,3,0,0,3,0,0,0,2,0,0,2,14.5,18,3,0,0,1,0,1,0,0,0,0,0,1,0,1,0,4,2,3,6.754887502163469,11.60964047443681,1.0,11.60964047443681,0.6449800263576005,0.0038698801581456034
HumanEval/105,gpt4,"    # Define a dictionary to map integers to their names
    number_to_name = {
        1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 5: ""Five"",
        6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""
    }

    # Filter the array to only include integers between 1 and 9 inclusive
    arr = [num for num in arr if num in number_to_name]

    # Sort and reverse the filtered array
    arr.sort(reverse=True)

    # Replace each integer with its corresponding name
    arr = [number_to_name[num] for num in arr]

    return arr
","number_to_name = {
    1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 5: ""Five"",
    6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""
}

arr = [num for num in arr if num in number_to_name]

arr.sort(reverse=True)

arr = [number_to_name[num] for num in arr]

return arr",259,12,31.0,57,9,4,125,56,0,0,0,0,0,0,0,3,0,0,3,0,0,0,2,0,0,2,8.5,14,1,0,0,1,0,2,0,0,0,0,1,0,0,0,1,4,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/106,gpt4,"    def factorial(i):
        result = 1
        for num in range(1, i + 1):
            result *= num
        return result

    def sum_numbers(i):
        return sum(range(1, i + 1))

    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(factorial(i))
        else:
            result.append(sum_numbers(i))
    return result
","def factorial(i):
    result = 1
    for num in range(1, i + 1):
        result *= num
    return result

def sum_numbers(i):
    return sum(range(1, i + 1))

result = []
for i in range(1, n + 1):
    if i % 2 == 0:
        result.append(factorial(i))
    else:
        result.append(sum_numbers(i))
return result",313,16,21.285714285714285,37,9,2,135,104,2,0,0,0,0,0,0,4,0,0,2,0,0,0,2,0,1,1,6.0,6,8,2,1,3,0,0,0,0,0,1,0,0,2,0,2,3,4,12,51.01955000865388,72.0,2.0,144.0,8.0,0.024
HumanEval/107,gpt4,"    def is_palindrome(num):
        return str(num) == str(num)[::-1]

    even_count = 0
    odd_count = 0
    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)
","def is_palindrome(num):
    return str(num) == str(num)[::-1]

even_count = 0
odd_count = 0
for i in range(1, n+1):
    if is_palindrome(i):
        if i % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
return (even_count, odd_count)",263,12,22.90909090909091,37,9,1,116,92,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,2,2,9.5,10,4,1,2,2,0,0,0,0,0,0,0,0,1,0,0,4,4,11,46.053747805010275,78.13781191217038,2.3636363636363638,184.68937361058454,10.260520756143585,0.026045937304056792
HumanEval/108,gpt4,"    count = 0
    for num in arr:
        # If number is negative, consider the first digit as negative
        if num < 0:
            sum_digits = -1 * int(str(num)[1]) + sum(int(d)
                                                     for d in str(num)[2:])
        else:
            sum_digits = sum(int(d) for d in str(num))
        if sum_digits > 0:
            count += 1
    return count
","count = 0
for num in arr:
    if num < 0:
        sum_digits = -1 * int(str(num)[1]) + sum(int(d)
                                                 for d in str(num)[2:])
    else:
        sum_digits = sum(int(d) for d in str(num))
    if sum_digits > 0:
        count += 1
return count",285,10,27.6,71,7,0,172,133,0,0,0,0,0,0,0,3,0,0,3,0,0,0,3,0,2,2,7.5,10,8,1,2,1,0,0,0,0,0,0,0,0,0,2,0,6,5,9,40.13896548741762,64.72503367497926,3.0555555555555554,197.77093622910328,10.987274234950183,0.021575011224993085
HumanEval/109,gpt4,"    # If array is empty, return True
    if len(arr) == 0:
        return True

    # Copy and sort the array
    sorted_arr = sorted(arr)

    # Check for each possible right shift
    for i in range(len(arr)):
        # Perform a right shift
        shifted_arr = arr[-i:] + arr[:-i]

        # If the shifted array is equal to the sorted array, return True
        if shifted_arr == sorted_arr:
            return True

    # If no right shift yields a sorted array, return False
    return False
","if len(arr) == 0:
    return True

sorted_arr = sorted(arr)

for i in range(len(arr)):
    shifted_arr = arr[-i:] + arr[:-i]

    if shifted_arr == sorted_arr:
        return True

return False",193,12,22.75,37,1,4,145,84,0,0,0,0,0,0,0,4,0,0,1,0,0,0,1,0,2,2,10.5,11,4,1,2,3,0,0,0,0,0,0,0,0,0,0,0,4,3,7,24.406371956566698,43.18506523353572,1.7142857142857142,74.03154040034694,4.11286335557483,0.014395021744511906
HumanEval/110,gpt4,"    # Count odd numbers in lst1
    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)

    # Count even numbers in lst2
    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)

    # If there are at least as many even numbers in lst2 as there are odd numbers in lst1,
    # it is possible to make all elements in lst1 even.
    if odd_in_lst1 <= even_in_lst2:
        return ""YES""
    else:
        return ""NO""
","odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)

even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)

if odd_in_lst1 <= even_in_lst2:
    return ""YES""
else:
    return ""NO""",171,8,27.333333333333332,49,12,2,115,48,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,3,2,11.5,12,2,0,1,2,0,0,0,0,0,0,0,0,0,2,0,6,4,7,27.651484454403228,51.89147427955947,2.857142857142857,148.26135508445563,8.236741949136423,0.01729715809318649
HumanEval/111,gpt4,"    # Create a dictionary to store the frequency of each letter
    letter_freq = {}
    # Remove the spaces from the string and iterate over each character
    for letter in test.replace(' ', ''):
        # If the letter is already in the dictionary, increment its frequency
        if letter in letter_freq:
            letter_freq[letter] += 1
        # If the letter is not in the dictionary, add it with a frequency of 1
        else:
            letter_freq[letter] = 1

    # Find the maximum frequency
    max_freq = max(letter_freq.values()) if letter_freq else 0

    # Create a new dictionary containing only the letters with the maximum frequency
    max_freq_letters = {letter: freq for letter,
                        freq in letter_freq.items() if freq == max_freq}

    return max_freq_letters
","letter_freq = {}
for letter in test.replace(' ', ''):
    if letter in letter_freq:
        letter_freq[letter] += 1
    else:
        letter_freq[letter] = 1

max_freq = max(letter_freq.values()) if letter_freq else 0

max_freq_letters = {letter: freq for letter,
                    freq in letter_freq.items() if freq == max_freq}

return max_freq_letters",358,13,34.6,68,3,3,211,116,0,0,0,0,0,0,0,2,0,0,3,0,0,0,2,0,1,4,13.5,19,4,1,1,1,0,0,1,0,0,0,1,0,0,0,3,6,3,6,20.264662506490406,28.529325012980813,1.5,42.793987519471216,2.377443751081734,0.009509775004326938
HumanEval/112,gpt4,"    # create a new string with characters from s not in c
    result = ''.join([char for char in s if char not in c])

    # check if the result is a palindrome
    is_palindrome = result == result[::-1]

    return (result, is_palindrome)
","result = ''.join([char for char in s if char not in c])

is_palindrome = result == result[::-1]

return (result, is_palindrome)",127,5,41.0,55,1,2,55,20,0,0,0,0,0,0,1,1,0,0,2,0,0,0,1,0,1,2,9.5,13,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,3,3,5,16.36452797660028,24.0,1.5,36.0,2.0,0.008
HumanEval/113,gpt4,"    result = []
    for i, s in enumerate(lst):
        odd_count = sum(1 for char in s if int(char) % 2 != 0)
        result.append(
            f""the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput."")
    return result
","result = []
for i, s in enumerate(lst):
    odd_count = sum(1 for char in s if int(char) % 2 != 0)
    result.append(
        f""the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput."")
return result",240,6,39.166666666666664,108,3,0,70,40,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,1,2,7.5,9,4,1,0,1,0,0,0,0,0,1,0,0,0,1,1,4,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/114,gpt4,"    # Initialize current_sum and min_sum to the first element
    current_sum = min_sum = nums[0]

    # Loop through the list from the second element
    for num in nums[1:]:
        # If current sum becomes greater than the current number, reset current sum to the current number
        current_sum = min(current_sum + num, num)
        # Update min_sum if current_sum is less
        min_sum = min(min_sum, current_sum)

    return min_sum
","current_sum = min_sum = nums[0]

for num in nums[1:]:
    current_sum = min(current_sum + num, num)
    min_sum = min(min_sum, current_sum)

return min_sum",155,7,29.8,45,2,2,106,52,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,2,9.0,11,2,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/115,gpt4,"    return sum([math.ceil(sum(well) / capacity) for well in grid])
",return sum([math.ceil(sum(well) / capacity) for well in grid]),62,1,62.0,62,0,0,11,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,3,0,0,1,0,1,0,0,0,0,0,0,0,0,1,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/116,gpt4,"    return sorted(arr, key=lambda x: (bin(x).count('1'), x))
","return sorted(arr, key=lambda x: (bin(x).count('1'), x))",56,1,56.0,56,1,0,9,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0.0,0,3,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/117,gpt4,"    # List of consonants
    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'

    # Split the string into words
    words = s.split()

    # Initialize an empty list to store the words with exactly n consonants
    selected_words = []

    # Loop through the words in the string
    for word in words:
        # Count the number of consonants in the word
        consonant_count = sum(1 for char in word if char in consonants)

        # If the word has exactly n consonants, add it to the list
        if consonant_count == n:
            selected_words.append(word)

    return selected_words
","consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'

words = s.split()

selected_words = []

for word in words:
    consonant_count = sum(1 for char in word if char in consonants)

    if consonant_count == n:
        selected_words.append(word)

return selected_words",274,13,32.75,67,1,5,150,80,0,0,0,0,0,0,0,10,0,0,3,0,0,0,2,0,1,4,11.0,15,3,1,1,1,0,0,0,0,0,1,0,0,0,1,2,5,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/118,gpt4,"    vowels = set('aeiouAEIOU')
    length = len(word)
    # start from the end of the word
    for i in range(length - 2, 0, -1):
        # check if the character is a vowel
        if word[i] in vowels:
            # check if the characters before and after it are consonants
            if word[i-1] not in vowels and word[i+1] not in vowels:
                return word[i]
    # if no vowel was found between two consonants, return an empty string
    return ''
","vowels = set('aeiouAEIOU')
length = len(word)
for i in range(length - 2, 0, -1):
    if word[i] in vowels:
        if word[i-1] not in vowels and word[i+1] not in vowels:
            return word[i]
return ''",207,7,28.714285714285715,63,5,0,141,80,0,0,0,0,0,0,2,6,1,0,4,0,0,0,1,0,0,2,6.0,6,3,1,2,2,0,0,0,0,0,0,0,0,0,0,0,5,6,10,48.72905595320056,92.0,4.5,414.0,23.0,0.030666666666666665
HumanEval/119,gpt4,"    # Combine both strings
    s = lst[0] + lst[1]

    # Check if the number of opening and closing parentheses are equal
    if s.count('(') != s.count(')'):
        return 'No'

    # Check if any valid combination of the two strings form a balanced string
    # Only two possible combinations: [0] + [1] and [1] + [0]
    for combo in [lst[0] + lst[1], lst[1] + lst[0]]:
        balance = 0
        for ch in combo:
            if ch == '(':
                balance += 1
            else:
                balance -= 1
            # If balance is negative at any point, the string is not balanced
            if balance < 0:
                break
        # If balance is 0 after going through the entire string, it is balanced
        if balance == 0:
            return 'Yes'

    # If none of the combinations form a balanced string
    return 'No'
","s = lst[0] + lst[1]

if s.count('(') != s.count(')'):
    return 'No'

for combo in [lst[0] + lst[1], lst[1] + lst[0]]:
    balance = 0
    for ch in combo:
        if ch == '(':
            balance += 1
        else:
            balance -= 1
        if balance < 0:
            break
    if balance == 0:
        return 'Yes'

return 'No'",339,18,21.466666666666665,48,11,3,292,184,0,1,0,0,0,0,0,2,0,0,2,0,0,0,2,0,4,2,4.0,7,2,2,4,3,0,0,0,0,0,1,0,0,0,0,2,7,5,13,59.715356810271004,112.58797503894243,3.4615384615384617,389.7276059040315,21.651533661335083,0.03752932501298081
HumanEval/120,gpt4,"    return sorted(heapq.nlargest(k, arr))
","return sorted(heapq.nlargest(k, arr))",37,1,37.0,37,0,0,6,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0.0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/121,gpt4,"    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)
",return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0),77,1,77.0,77,4,0,21,4,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,2,0,0.0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,1,0,4,4,8,32.0,53.77443751081735,2.5,134.43609377704337,7.468671876502409,0.017924812503605784
HumanEval/122,gpt4,"    # Ensure the constraints are met
    assert 1 <= len(arr) <= 100, ""Length of array should be between 1 and 100""
    assert 1 <= k <= len(arr), ""k should be between 1 and length of array""

    # Slice the array to get first k elements and filter those with at most two digits
    two_digit_elements = [x for x in arr[:k] if -10 < x < 100]

    # Return the sum of two digit elements
    return sum(two_digit_elements)
","assert 1 <= len(arr) <= 100, ""Length of array should be between 1 and 100""
assert 1 <= k <= len(arr), ""k should be between 1 and length of array""

two_digit_elements = [x for x in arr[:k] if -10 < x < 100]

return sum(two_digit_elements)",237,6,58.0,74,15,2,97,28,0,0,0,0,2,0,0,1,2,0,1,0,0,0,1,0,6,1,18.0,18,3,0,0,1,0,1,0,0,0,0,0,0,0,0,0,5,3,8,28.75488750216347,58.81033751683406,1.875,110.26938284406387,6.126076824670215,0.019603445838944685
HumanEval/123,gpt4,"    # initialize the list to store the sequence
    collatz_seq = []

    while n != 1:
        # if the number is odd, add it to the list
        if n % 2 != 0:
            collatz_seq.append(n)
        # apply the collatz operation
        n = n // 2 if n % 2 == 0 else 3 * n + 1

    # add 1 to the list (the end of every collatz sequence)
    collatz_seq.append(1)

    # sort the list in increasing order and return
    return sorted(collatz_seq)
","collatz_seq = []

while n != 1:
    if n % 2 != 0:
        collatz_seq.append(n)
    n = n // 2 if n % 2 == 0 else 3 * n + 1

collatz_seq.append(1)

return sorted(collatz_seq)",175,10,23.714285714285715,43,9,3,139,72,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,3,2,6.0,11,3,1,1,1,0,0,0,0,0,1,0,0,0,0,2,4,6,8,39.50977500432694,91.37651812938249,6.0,548.259108776295,30.45883937646083,0.03045883937646083
HumanEval/124,gpt4,"    # Check if the string is empty
    if not date:
        return False

    # Check the format of the date
    try:
        # If the date is not in the correct format, this will raise a ValueError
        datetime_object = datetime.strptime(date, '%m-%d-%Y')

        # Check the number of days according to the month
        month = datetime_object.month
        day = datetime_object.day
        if month in [1, 3, 5, 7, 8, 10, 12]:
            if day < 1 or day > 31:
                return False
        elif month in [4, 6, 9, 11]:
            if day < 1 or day > 30:
                return False
        elif month == 2:  # February
            if day < 1 or day > 29:  # Assumes all years could have a leap year
                return False
        else:
            # This should never happen, but just in case
            return False

        # If we've made it this far, the date is valid
        return True
    except ValueError:
        # The date is in an incorrect format
        return False
","if not date:
    return False

try:
    datetime_object = datetime.strptime(date, '%m-%d-%Y')

    month = datetime_object.month
    day = datetime_object.day
    if month in [1, 3, 5, 7, 8, 10, 12]:
        if day < 1 or day > 31:
            return False
    elif month in [4, 6, 9, 11]:
        if day < 1 or day > 30:
            return False
    elif month == 2:
        if day < 1 or day > 29:
            return False
    else:
        return False

    return True
except ValueError:
    return False",508,23,24.3,57,24,3,369,240,0,0,0,0,0,1,1,4,0,0,2,0,0,0,0,0,7,3,7.666666666666667,15,1,0,7,7,0,0,0,0,0,2,0,0,0,0,3,12,6,16,79.50977500432694,169.4584015082173,4.6875,794.3362570697685,44.12979205943159,0.05648613383607243
HumanEval/125,gpt4,"    if ' ' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.split(',')
    else:
        count = 0
        for char in txt:
            if char.islower() and (ord(char) - ord('a')) % 2 != 0:
                count += 1
        return count
","if ' ' in txt:
    return txt.split()
elif ',' in txt:
    return txt.split(',')
else:
    count = 0
    for char in txt:
        if char.islower() and (ord(char) - ord('a')) % 2 != 0:
            count += 1
    return count",224,10,21.5,62,4,0,106,80,0,0,0,0,0,0,0,3,1,0,3,0,0,0,1,0,1,1,5.0,5,5,1,3,3,0,0,0,0,0,0,0,0,0,0,3,6,6,13,63.61549134016113,89.20647778231529,3.230769230769231,288.20554360440326,16.011419089133515,0.029735492594105097
HumanEval/126,gpt4,"    # Make a set from the list to remove duplicates
    unique_numbers = set(lst)

    # Check if there are more than two of the same number in the list
    for number in unique_numbers:
        if lst.count(number) > 2:
            return False

    # Check if the list is in ascending order
    return lst == sorted(lst)
","unique_numbers = set(lst)

for number in unique_numbers:
    if lst.count(number) > 2:
        return False

return lst == sorted(lst)",134,7,25.6,29,1,2,87,44,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,2,1,14.0,14,3,1,1,2,0,0,0,0,0,0,0,0,0,0,1,3,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/127,gpt4,"    # Helper function to check if a number is prime
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    # Find the intersection of the two intervals
    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])

    # If there's no intersection, return ""NO""
    if start > end:
        return ""NO""

    # Calculate the length of the intersection and check if it's prime
    length = end - start
    if is_prime(length):
        return ""YES""
    else:
        return ""NO""
","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

start = max(interval1[0], interval2[0])
end = min(interval1[1], interval2[1])

if start > end:
    return ""NO""

length = end - start
if is_prime(length):
    return ""YES""
else:
    return ""NO""",349,19,20.6875,39,14,3,200,132,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,3,3,4.666666666666667,6,5,1,4,6,0,0,0,0,0,0,0,0,1,0,0,3,7,10,52.87076540327685,85.83671966625714,4.9,420.59992636466,23.366662575814445,0.02861223988875238
HumanEval/128,gpt4,"    if len(arr) == 0:
        return None

    abs_sum = 0
    sign_product = 1

    for num in arr:
        if num == 0:
            return 0
        elif num < 0:
            sign_product *= -1
        abs_sum += abs(num)

    return abs_sum * sign_product
","if len(arr) == 0:
    return None

abs_sum = 0
sign_product = 1

for num in arr:
    if num == 0:
        return 0
    elif num < 0:
        sign_product *= -1
    abs_sum += abs(num)

return abs_sum * sign_product",214,14,18.272727272727273,29,7,3,101,76,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,3,2,9.5,12,2,1,3,3,0,0,0,0,0,0,0,0,0,0,0,5,5,8,35.60964047443681,74.00879436282185,4.0625,300.6607270989638,16.70337372772021,0.024669598120940616
HumanEval/129,gpt4,"    n = len(grid)
    d = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    min_path = [n * n + 1] * k

    def dfs(i, j, path):
        nonlocal min_path
        if len(path) == k:
            min_path = min(min_path, path)
            return
        for dx, dy in d:
            ni, nj = i + dx, j + dy
            if 0 <= ni < n and 0 <= nj < n:
                dfs(ni, nj, path + [grid[ni][nj]])

    for i in range(n):
        for j in range(n):
            dfs(i, j, [grid[i][j]])

    return min_path
","n = len(grid)
d = [(-1, 0), (1, 0), (0, -1), (0, 1)]
min_path = [n * n + 1] * k

def dfs(i, j, path):
    nonlocal min_path
    if len(path) == k:
        min_path = min(min_path, path)
        return
    for dx, dy in d:
        ni, nj = i + dx, j + dy
        if 0 <= ni < n and 0 <= nj < n:
            dfs(ni, nj, path + [grid[ni][nj]])

for i in range(n):
    for j in range(n):
        dfs(i, j, [grid[i][j]])

return min_path",432,19,25.875,46,11,3,197,132,1,0,0,0,0,0,0,3,1,0,3,0,0,0,3,0,5,4,4.5,8,7,3,2,2,0,0,0,0,0,4,0,0,1,0,0,3,7,19,100.36210720983135,178.61670928936152,4.421052631578948,789.6738726477037,43.870770702650205,0.05953890309645384
HumanEval/130,gpt4,"    # initialize the list with the size n + 1
    sequence = [0] * (n + 2)  # we add 2 to cover the case when n is odd and we need to calculate tri(n + 1)
    sequence[1] = 3  # base case

    # compute terms for even indices
    for i in range(2, n + 2, 2):
        sequence[i] = 1 + i / 2

    # compute terms for odd indices
    for i in range(3, n + 1, 2):
        sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1]

    return sequence[1:n + 1]  # we start from index 1 and exclude the last one if it was added for calculation purposes
","sequence = [0] * (n + 2)
sequence[1] = 3

for i in range(2, n + 2, 2):
    sequence[i] = 1 + i / 2

for i in range(3, n + 1, 2):
    sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1]

return sequence[1:n + 1]  # we start from index 1 and exclude the last one if it was added for calculation purposes",315,10,43.714285714285715,115,18,3,154,48,0,0,0,0,0,0,0,3,1,0,2,0,0,0,3,0,0,3,9.5,11,2,2,0,1,0,0,0,0,0,1,0,0,0,0,0,3,4,11,46.053747805010275,140.64806144190666,4.363636363636363,613.7369953828654,34.09649974349252,0.04688268714730222
HumanEval/131,gpt4,"    # Convert the integer to a string to enable easy iteration
    str_n = str(n)

    # Initialize product to 1
    product = 1

    # Initialize a flag to check if there is any odd digit
    has_odd = False

    # Iterate over each digit in n
    for digit in str_n:
        # Convert the digit back to an integer
        int_digit = int(digit)

        # If the digit is odd, multiply the product by the digit and set has_odd to True
        if int_digit % 2 == 1:
            product *= int_digit
            has_odd = True

    # If there is no odd digit, return 0; otherwise, return the product of the odd digits
    return 0 if not has_odd else product
","str_n = str(n)

product = 1

has_odd = False

for digit in str_n:
    int_digit = int(digit)

    if int_digit % 2 == 1:
        product *= int_digit
        has_odd = True

return 0 if not has_odd else product",210,14,21.88888888888889,36,4,5,192,96,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,1,4,7.0,9,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,4,4,6,23.509775004326936,36.541209043760986,2.3333333333333335,85.26282110210897,4.736823394561609,0.012180403014586996
HumanEval/132,gpt4,"    # Initialize a counter for opened and closed brackets
    open_brackets = 0
    nested = False

    # Iterate over the string
    for char in string:
        # Check if the character is an open bracket
        if char == '[':
            open_brackets += 1
        # Check if the character is a close bracket
        elif char == ']':
            # If there is an open bracket before this close bracket
            if open_brackets > 0:
                open_brackets -= 1
                # Check if we have nested brackets
                if open_brackets > 0:
                    nested = True
            # If there is no open bracket before this close bracket, return False
            else:
                return False
    # If all brackets are properly closed and we have nested brackets, return True
    if open_brackets == 0 and nested:
        return True
    # If not all brackets are properly closed or there are no nested brackets, return False
    else:
        return False
","open_brackets = 0
nested = False

for char in string:
    if char == '[':
        open_brackets += 1
    elif char == ']':
        if open_brackets > 0:
            open_brackets -= 1
            if open_brackets > 0:
                nested = True
        else:
            return False
if open_brackets == 0 and nested:
    return True
else:
    return False",359,17,21.4375,33,6,1,345,228,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,5,2,9.5,13,0,1,5,3,0,0,0,0,0,0,0,0,0,0,0,8,5,8,35.60964047443681,88.81055323538621,5.0,444.0527661769311,24.669598120940616,0.029603517745128736
HumanEval/133,gpt4,"    return sum(math.ceil(num)**2 for num in lst)
",return sum(math.ceil(num)**2 for num in lst),44,1,44.0,44,1,0,9,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,1,1,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/134,gpt4,"    # check if the string is empty
    if not txt:
        return False
    # get the last character
    last_char = txt[-1]
    # check if the last character is a letter and if the character before the last character is a space or the start of the string
    return last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' ')
","if not txt:
    return False
last_char = txt[-1]
return last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' ')",113,4,27.5,64,3,0,82,32,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,2,1,9.0,9,2,0,1,2,0,0,0,0,0,0,0,0,0,0,1,4,5,10,44.82892142331043,70.32403072095333,2.75,193.39108448262166,10.743949137923426,0.02344134357365111
HumanEval/135,gpt4,"    index = -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            index = i
    return index
","index = -1
for i in range(1, len(arr)):
    if arr[i] < arr[i-1]:
        index = i
return index",96,5,18.4,28,3,0,44,32,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,5.0,5,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,3,4,12.75488750216347,22.458839376460833,1.875,42.11032383086406,2.3394624350480036,0.007486279792153611
HumanEval/136,gpt4,"    neg_integers = [i for i in lst if i < 0]
    pos_integers = [i for i in lst if i > 0]

    if len(neg_integers) == 0:
        largest_neg_integer = None
    else:
        largest_neg_integer = max(neg_integers)

    if len(pos_integers) == 0:
        smallest_pos_integer = None
    else:
        smallest_pos_integer = min(pos_integers)

    return (largest_neg_integer, smallest_pos_integer)
","neg_integers = [i for i in lst if i < 0]
pos_integers = [i for i in lst if i > 0]

if len(neg_integers) == 0:
    largest_neg_integer = None
else:
    largest_neg_integer = max(neg_integers)

if len(pos_integers) == 0:
    smallest_pos_integer = None
else:
    smallest_pos_integer = min(pos_integers)

return (largest_neg_integer, smallest_pos_integer)",353,14,30.90909090909091,50,4,3,96,60,0,0,0,0,0,0,0,2,0,2,2,0,0,0,2,0,4,4,17.0,20,4,0,2,1,0,2,0,0,0,0,0,0,0,0,0,7,3,4,12.75488750216347,33.68825906469125,3.0,101.06477719407376,5.614709844115208,0.011229419688230418
HumanEval/137,gpt4,"    # Convert the inputs to strings to handle commas as decimal points
    a_str = str(a).replace(',', '.')
    b_str = str(b).replace(',', '.')

    # Convert the inputs to floats for comparison
    a_float = float(a_str)
    b_float = float(b_str)

    # Return None if the values are equal
    if a_float == b_float:
        return None

    # Return the larger value in its original form
    elif a_float > b_float:
        return a
    else:
        return b
","a_str = str(a).replace(',', '.')
b_str = str(b).replace(',', '.')

a_float = float(a_str)
b_float = float(b_str)

if a_float == b_float:
    return None

elif a_float > b_float:
    return a
else:
    return b",209,13,19.7,32,0,3,120,68,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,4,6.0,7,6,0,2,3,0,0,0,0,0,0,0,0,0,0,2,3,2,2,4.0,12.0,2.0,24.0,1.3333333333333333,0.004
HumanEval/138,gpt4,"    if n < 8:  # if n is less than 8, it cannot be written as a sum of four positive even numbers
        return False
    elif n % 2 == 0:  # if n is even and greater than or equal to 8, it can be written as a sum of four positive even numbers
        return True
    else:  # if n is odd, it cannot be written as a sum of four positive even numbers
        return False
","if n < 8:
    return False
elif n % 2 == 0:
    return True
else:
    return False",82,6,12.833333333333334,16,3,0,110,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0.0,0,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,3,3,5,16.36452797660028,27.0,1.8,48.6,2.7,0.009
HumanEval/139,gpt4,"    result = 1
    for i in range(1, n+1):
        result *= math.factorial(i)
    return result
","result = 1
for i in range(1, n+1):
    result *= math.factorial(i)
return result",80,4,19.25,31,3,0,29,20,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,0,1,6.0,6,2,1,0,1,0,0,0,0,0,0,0,0,0,0,1,2,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/140,gpt4,"    # replace all consecutive spaces that are more than 2 with ""-""
    text = re.sub(r' {3,}', '-', text)
    # replace all remaining spaces with ""_""
    text = re.sub(r' ', '_', text)
    return text
","text = re.sub(r' {3,}', '-', text)
text = re.sub(r' ', '_', text)
return text",77,3,25.0,34,1,0,48,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4.0,4,2,0,0,1,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/141,gpt4,"    # Check the file name contains exactly one dot.
    if file_name.count('.') != 1:
        return 'No'

    # Split the file name into name and extension.
    name, ext = file_name.split('.')

    # Check the name is not empty and starts with a latin alphabet letter.
    if not name or not name[0].isalpha():
        return 'No'

    # Check the name contains no more than three digits.
    if sum(c.isdigit() for c in name) > 3:
        return 'No'

    # Check the extension is one of the allowed ones.
    if ext not in ['txt', 'exe', 'dll']:
        return 'No'

    return 'Yes'
","if file_name.count('.') != 1:
    return 'No'

name, ext = file_name.split('.')

if not name or not name[0].isalpha():
    return 'No'

if sum(c.isdigit() for c in name) > 3:
    return 'No'

if ext not in ['txt', 'exe', 'dll']:
    return 'No'

return 'Yes'",258,15,24.4,38,3,5,152,76,0,0,0,0,0,0,3,2,0,0,2,0,0,0,1,0,2,1,11.0,11,5,0,4,5,0,0,0,0,0,1,0,0,0,1,4,7,5,10,44.82892142331043,62.5102495297363,2.5,156.27562382434076,8.681979101352264,0.020836749843245433
HumanEval/142,gpt4,"    total = 0
    for idx, val in enumerate(lst):
        if idx % 3 == 0:  # if index is multiple of 3
            total += val ** 2
        elif idx % 4 == 0:  # if index is multiple of 4 and not a multiple of 3
            total += val ** 3
        else:  # if index is not a multiple of 3 or 4
            total += val
    return total
","total = 0
for idx, val in enumerate(lst):
    if idx % 3 == 0:
        total += val ** 2
    elif idx % 4 == 0:
        total += val ** 3
    else:
        total += val
return total",181,9,19.22222222222222,31,7,0,133,72,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,2,1,5.0,5,1,1,2,1,0,0,0,0,0,0,0,0,0,0,0,4,4,11,46.053747805010275,105.48604608143,3.272727272727273,345.22705990286187,19.179281105714548,0.03516201536047667
HumanEval/143,gpt4,"    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    words = sentence.split()
    prime_length_words = [word for word in words if is_prime(len(word))]
    return ' '.join(prime_length_words)
","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

words = sentence.split()
prime_length_words = [word for word in words if is_prime(len(word))]
return ' '.join(prime_length_words)",286,11,27.6,68,6,1,110,80,1,0,0,0,0,0,0,9,0,0,2,0,0,0,2,0,2,2,11.5,18,6,1,2,4,0,1,0,0,0,0,0,0,1,0,2,3,5,8,35.60964047443681,55.506595772116384,3.125,173.4581117878637,9.636561765992427,0.01850219859070546
HumanEval/144,gpt4,"    # Split the fractions into numerators and denominators
    x_num, x_den = map(int, x.split('/'))
    n_num, n_den = map(int, n.split('/'))

    # Multiply the numerators and denominators
    result_num = x_num * n_num
    result_den = x_den * n_den

    # If the result numerator is divisible by the result denominator,
    # then the multiplication simplifies to a whole number
    return result_num % result_den == 0
","x_num, x_den = map(int, x.split('/'))
n_num, n_den = map(int, n.split('/'))

result_num = x_num * n_num
result_den = x_den * n_den

return result_num % result_den == 0",167,7,32.2,37,1,2,87,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,12.0,14,4,0,0,1,0,0,0,0,0,0,0,0,0,0,2,1,3,8,28.75488750216347,41.51317942364757,1.5,62.26976913547136,3.4594316186372978,0.01383772647454919
HumanEval/145,gpt4,"    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))
","return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))",84,1,84.0,84,0,0,13,4,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,0,0,0.0,0,6,0,0,1,0,0,0,0,0,0,0,0,1,1,1,2,0,0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/146,gpt4,"    return len([num for num in nums if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0])
",return len([num for num in nums if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0]),106,1,106.0,106,8,0,25,4,0,0,0,0,0,0,0,1,2,0,1,0,0,0,1,0,3,0,0.0,0,5,0,0,1,0,1,0,0,0,0,0,0,0,0,0,5,5,12,54.62919048309069,85.83671966625714,2.9166666666666665,250.3570990265833,13.908727723699073,0.02861223988875238
HumanEval/147,gpt4,"    # Initialize the array and the count dictionary
    a = [i * i - i + 1 for i in range(1, n + 1)]
    counts = {0: 0, 1: 0, 2: 0}

    # Count the remainders when dividing by 3
    for num in a:
        counts[num % 3] += 1

    # Count the number of triples that add up to a multiple of 3
    triples = 0
    # 3 numbers having remainder 0
    triples += counts[0] * (counts[0] - 1) * (counts[0] - 2) // 6
    # One number having remainder 0 and other two having remainder 1 and 2
    triples += counts[0] * counts[1] * counts[2]
    # 3 numbers having remainder 1
    triples += counts[1] * (counts[1] - 1) * (counts[1] - 2) // 6
    # 3 numbers having remainder 2
    triples += counts[2] * (counts[2] - 1) * (counts[2] - 2) // 6

    return triples
","a = [i * i - i + 1 for i in range(1, n + 1)]
counts = {0: 0, 1: 0, 2: 0}

for num in a:
    counts[num % 3] += 1

triples = 0
triples += counts[0] * (counts[0] - 1) * (counts[0] - 2) // 6
triples += counts[0] * counts[1] * counts[2]
triples += counts[1] * (counts[1] - 1) * (counts[1] - 2) // 6
triples += counts[2] * (counts[2] - 1) * (counts[2] - 2) // 6

return triples",372,13,36.0,61,33,3,201,72,0,0,0,0,0,0,0,2,0,0,2,0,0,0,2,0,0,3,4.666666666666667,7,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,3,5,40,224.4867642699313,444.84010080270366,3.375,1501.3353402091248,83.40751890050693,0.14828003360090122
HumanEval/148,gpt4,"    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]

    # Check if planet names are correct
    if planet1 not in planets or planet2 not in planets:
        return ()

    # Find the indices of planet1 and planet2
    index1 = planets.index(planet1)
    index2 = planets.index(planet2)

    # Ensure index1 is less than index2
    if index1 > index2:
        index1, index2 = index2, index1

    # Return the planets between planet1 and planet2
    return tuple(planets[index1+1:index2])
","planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]

if planet1 not in planets or planet2 not in planets:
    return ()

index1 = planets.index(planet1)
index2 = planets.index(planet2)

if index1 > index2:
    index1, index2 = index2, index1

return tuple(planets[index1+1:index2])",319,12,38.5,89,15,4,113,56,0,0,0,0,0,0,2,1,0,0,2,0,0,0,0,0,1,4,9.666666666666666,16,3,0,2,2,0,0,0,0,0,1,0,0,0,0,2,4,4,8,32.0,53.77443751081735,2.5,134.43609377704337,7.468671876502409,0.017924812503605784
HumanEval/149,gpt4,"    # Remove strings of odd length
    lst = [x for x in lst if len(x) % 2 == 0]

    # Sort the list based on length and then alphabetically
    lst.sort(key=lambda x: (len(x), x))

    return lst
","lst = [x for x in lst if len(x) % 2 == 0]

lst.sort(key=lambda x: (len(x), x))

return lst",90,5,28.666666666666668,41,2,2,50,20,0,0,0,0,0,0,0,2,0,0,1,0,0,0,1,0,1,1,3.0,3,3,0,0,1,0,1,0,0,0,0,0,0,1,0,1,3,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/150,gpt4,"    if is_prime(n):
        return x
    else:
        return y
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True
","if is_prime(n):
    return x
else:
    return y
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True",320,17,17.88235294117647,42,11,0,200,152,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,7,1,1.0,1,1,1,5,7,0,0,0,0,0,0,0,0,1,0,0,2,6,17,84.99664330558272,217.13097389073664,5.647058823529412,1226.1513819712188,68.11952122062327,0.07237699129691222
HumanEval/151,gpt4,"    return sum([x**2 for x in lst if x > 0 and x % 2 == 1 and isinstance(x, int)])
","return sum([x**2 for x in lst if x > 0 and x % 2 == 1 and isinstance(x, int)])",78,1,78.0,78,4,0,22,4,0,0,0,0,0,0,0,1,2,0,1,0,0,0,1,0,2,0,0.0,0,2,0,0,1,0,1,0,0,0,0,0,0,0,0,0,5,5,8,35.60964047443681,59.207035490257475,3.4375,203.52418449776007,11.306899138764448,0.019735678496752493
HumanEval/152,gpt4,"    return [abs(g - s) for g, s in zip(game, guess)]
","return [abs(g - s) for g, s in zip(game, guess)]",48,1,48.0,48,0,0,13,4,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0.0,0,2,0,0,1,0,1,0,0,0,0,0,0,0,0,0,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/153,gpt4,"    # Initialize a variable to store the maximum strength and the strongest extension
    max_strength = -float('inf')
    strongest_ext = ''

    # Iterate over the extensions
    for extension in extensions:
        # Calculate the strength of the current extension
        cap = sum(1 for c in extension if c.isupper())
        sm = sum(1 for c in extension if c.islower())
        strength = cap - sm

        # If the strength of the current extension is greater than the maximum strength found so far,
        # update the maximum strength and the strongest extension
        if strength > max_strength:
            max_strength = strength
            strongest_ext = extension

    # Return the class name with the strongest extension
    return f'{class_name}.{strongest_ext}'
","max_strength = -float('inf')
strongest_ext = ''

for extension in extensions:
    cap = sum(1 for c in extension if c.isupper())
    sm = sum(1 for c in extension if c.islower())
    strength = cap - sm

    if strength > max_strength:
        max_strength = strength
        strongest_ext = extension

return f'{class_name}.{strongest_ext}'",341,13,32.9,50,2,3,198,108,0,0,0,0,0,0,0,3,0,0,3,0,0,0,3,0,1,5,7.6,13,5,1,1,1,0,0,0,0,0,0,0,0,0,2,2,7,3,5,16.36452797660028,24.0,1.5,36.0,2.0,0.008
HumanEval/154,gpt4,"    n = len(b)
    for i in range(n):
        rotation = b[i:] + b[:i]  # rotate b
        if rotation in a:          # if rotation is a substring of a
            return True
    return False
","n = len(b)
for i in range(n):
    rotation = b[i:] + b[:i]
    if rotation in a:
        return True
return False",113,6,18.0,28,0,0,75,40,0,0,0,0,0,0,0,1,0,0,2,0,0,0,1,0,0,2,4.5,8,2,1,1,2,0,0,0,0,0,0,0,0,0,0,0,3,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/155,gpt4,"    num = abs(num)  # Take absolute value to handle negative numbers
    num_str = str(num)  # Convert the number to string for easy iteration
    even_count = 0  # Counter for even digits
    odd_count = 0  # Counter for odd digits

    # Iterate over each digit
    for digit in num_str:
        # Check if the digit is even
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1

    return (even_count, odd_count)
","num = abs(num)
num_str = str(num)
even_count = 0
odd_count = 0

for digit in num_str:
    if int(digit) % 2 == 0:
        even_count += 1
    else:
        odd_count += 1

return (even_count, odd_count)",202,12,19.1,30,6,2,139,76,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,4,7.25,10,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,3,7,24.406371956566698,39.863137138648355,1.7142857142857142,68.33680652339717,3.796489251299843,0.013287712379549451
HumanEval/156,gpt4,"    if not 1 <= num <= 1000:
        raise ValueError(""Input must be between 1 and 1000"")

    val = [
        1000, 900, 500, 400,
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
    ]
    syb = [
        ""M"", ""CM"", ""D"", ""CD"",
        ""C"", ""XC"", ""L"", ""XL"",
        ""X"", ""IX"", ""V"", ""IV"",
        ""I""
    ]
    roman_num = ''
    i = 0
    while num > 0:
        for _ in range(num // val[i]):
            roman_num += syb[i]
            num -= val[i]
        i += 1
    return roman_num.lower()
","if not 1 <= num <= 1000:
    raise ValueError(""Input must be between 1 and 1000"")

val = [
    1000, 900, 500, 400,
    100, 90, 50, 40,
    10, 9, 5, 4,
    1
]
syb = [
    ""M"", ""CM"", ""D"", ""CD"",
    ""C"", ""XC"", ""L"", ""XL"",
    ""X"", ""IX"", ""V"", ""IV"",
    ""I""
]
roman_num = ''
i = 0
while num > 0:
    for _ in range(num // val[i]):
        roman_num += syb[i]
        num -= val[i]
    i += 1
return roman_num.lower()",414,23,17.818181818181817,56,41,1,202,148,0,0,0,0,0,0,1,2,1,0,1,0,0,1,1,1,3,4,4.333333333333333,9,3,2,1,1,1,0,0,0,0,2,0,0,0,0,1,4,6,10,48.72905595320056,88.0,4.2,369.6,20.533333333333335,0.029333333333333333
HumanEval/157,gpt4,"    # Sort the sides so that 'c' becomes the largest side (hypotenuse)
    a, b, c = sorted([a, b, c])

    # Check the Pythagorean theorem
    return a*a + b*b == c*c
","a, b, c = sorted([a, b, c])

return a*a + b*b == c*c",52,3,25.0,27,0,1,42,16,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,9.0,9,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,3,7,24.406371956566698,49.82892142331044,2.142857142857143,106.77626019280808,5.932014455156004,0.016609640474436815
HumanEval/158,gpt4,"    max_unique_char = 0
    max_word = ''

    # Iterate over each word in the list
    for word in words:
        # Find the number of unique characters in the current word
        unique_char = len(set(word))

        # If the current word has more unique characters or
        # has the same amount but is lexicographically smaller,
        # update the maximum
        if unique_char > max_unique_char or (unique_char == max_unique_char and word < max_word):
            max_unique_char = unique_char
            max_word = word

    return max_word
","max_unique_char = 0
max_word = ''

for word in words:
    unique_char = len(set(word))

    if unique_char > max_unique_char or (unique_char == max_unique_char and word < max_word):
        max_unique_char = unique_char
        max_word = word

return max_word",260,11,31.25,93,1,3,154,92,0,0,0,0,0,0,0,11,1,0,1,0,0,0,1,0,3,3,11.333333333333334,15,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,5,5,8,35.60964047443681,55.506595772116384,3.125,173.4581117878637,9.636561765992427,0.01850219859070546
HumanEval/159,gpt4,"    # Calculate the total number of carrots you will eat
    total_eaten = number + min(need, remaining)

    # Calculate the number of carrots left after your meals
    remaining = max(0, remaining - need)

    return [total_eaten, remaining]
","total_eaten = number + min(need, remaining)

remaining = max(0, remaining - need)

return [total_eaten, remaining]",114,5,36.666666666666664,43,1,2,50,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,10.0,11,2,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,2,4,10.0,15.509775004326936,1.0,15.509775004326936,0.861654166907052,0.005169925001442312
HumanEval/160,gpt4,"    # Build the expression as a string
    expression = str(operand[0])
    for i in range(1, len(operand)):
        expression += operator[i-1] + str(operand[i])
    # Evaluate the expression and return the result
    return eval(expression)
","expression = str(operand[0])
for i in range(1, len(operand)):
    expression += operator[i-1] + str(operand[i])
return eval(expression)",135,4,33.0,49,3,0,52,28,0,0,0,0,0,0,0,2,3,0,1,0,0,0,1,0,0,1,10.0,10,5,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,6,17.509775004326936,27.0,1.0,27.0,1.5,0.009
HumanEval/161,gpt4,"    # If the string contains no letters, reverse the string
    if not any(c.isalpha() for c in s):
        return s[::-1]

    # Else, if s[i] is a letter, reverse its case from lower to upper or vise versa,
    # otherwise keep it as it is
    return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)
","if not any(c.isalpha() for c in s):
    return s[::-1]

return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)",144,4,47.0,88,1,1,79,28,0,0,0,0,0,0,1,2,0,0,2,0,0,0,2,0,0,0,0.0,0,7,0,1,2,0,0,0,0,0,0,0,0,0,2,6,6,2,2,4.0,8.0,1.0,8.0,0.4444444444444444,0.0026666666666666666
HumanEval/162,gpt4,"    if text == """":
        return None
    return hashlib.md5(text.encode()).hexdigest()
","if text == """":
    return None
return hashlib.md5(text.encode()).hexdigest()",76,3,24.666666666666668,45,1,0,21,16,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0.0,0,3,0,1,2,0,0,0,0,0,0,0,0,0,0,3,2,1,2,2.0,4.754887502163469,0.5,2.3774437510817346,0.1320802083934297,0.0015849625007211565
HumanEval/163,gpt4,"    if a > b:
        a, b = b, a

    return [i for i in range(a, b+1) if i % 2 == 0 and i < 10]
","if a > b:
    a, b = b, a

return [i for i in range(a, b+1) if i % 2 == 0 and i < 10]",85,4,27.333333333333332,58,5,1,39,16,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,3,1,6.0,6,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,5,6,10,48.72905595320056,72.0,3.6,259.2,14.399999999999999,0.024
