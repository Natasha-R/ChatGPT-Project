You have the task to steer a tidy-up robot across a room with walls. The room is square-shaped. The room is modelled as a system of cells. A room is divided into cells by an x and y-coordinate system, each starting at 0. A cell is identified by its lower left corner. The robot exists and moves within the grid cells, but the walls run along the grid lines. The room contains obstacles, running horizontally or vertically. Room boundaries cannot be passed - essentially they also are a kind of wall. The robot can be moved by a simple set of commands. A command is enclosed by square brackets, and has two parts: a direction and the number of steps. A tidy-up robot can only be moved horizontally or vertically, not diagonally. If the tidy-up robot initially is located in the cell (1,2) and the command is [no,2], the tidy-up robot moves 2 cells up, and is then positioned on (1,4). The direction is either no (north), ea (east), so (south), or we (west). If the tidy-up robot meets a wall or a room boundary, then it moves only as many steps as possible, and then stops. In my map of the room the robot starts at (3, 0). The grid is 12 cells wide and 8 cells high. The coordinate system begins at 0. Along with the walls at the room boundaries, there are four walls, between co-ordinates: (3,0)-(3,3) and (4,3)-(7,3) and (7,0)-(7,2) and (1,4)-(8,4). Remember that the walls exist on the grid lines, whereas the robot exists and moves on the actual grid cells, where a grid cell is defined by the coordinate associated with its bottom left corner. Use this information to write the Java class thkoeln.st.st2praktikum.exercise.Exercise0, using my map to define the starting location of the robot, the size of the room, and the locations of the walls. The class has to implement the interface: public interface Walkable { String walkTo(String walkCommandString); } The string walkCommandString has the format e.g. "[no,2]". The expected return value is the coordinate the tidy-up robot, e.g. "(2,4)".



You have the task to steer a tidy-up robot across a room with walls. The room is square-shaped. The room is modelled as a system of cells. A room is divided into cells by an x and y-coordinate system, each starting at 0. The walls exist on the grid lines, whereas the robot exists and moves on the actual grid cells, where a cell is defined by the coordinate associated with its bottom left corner. The room contains obstacles, running horizontally or vertically. Room boundaries cannot be passed - essentially they also are a kind of wall. The robot can be moved by a simple set of commands. A command is enclosed by square brackets, and has two parts: a direction and the number of steps. A tidy-up robot can only be moved horizontally or vertically, not diagonally. If the tidy-up robot initially is located in the cell (1,2) and the command is [no,2], the tidy-up robot moves 2 cells up, and is then positioned on (1,4). The direction is either no (north), ea (east), so (south), or we (west). If the tidy-up robot meets a wall or a room boundary, then it moves only as many steps as possible, and then stops. In my map of the room the robot starts at (3, 0). The grid is 12 cells wide and 8 cells high. The coordinate system begins at 0. Along with the walls at the room boundaries, there are four walls, between co-ordinates: (3,0)-(3,3) and (4,3)-(7,3) and (7,0)-(7,2) and (1,4)-(8,4). Use this information to write the Java class thkoeln.st.st2praktikum.exercise.Exercise0, using my map to define the starting location of the robot, the size of the room, and the locations of the walls. The class has to implement the interface: public interface Walkable { String walkTo(String walkCommandString); } The string walkCommandString has the format e.g. "[no,2]". The expected return value is the coordinate the tidy-up robot, e.g. "(2,4)". Hardcode the walls, robot position and room size.