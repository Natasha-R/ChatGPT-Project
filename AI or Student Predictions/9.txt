package thkoeln.st.st2praktikum.exercise;

public class Barrier {

    private int startX;
    private int startY;
    private int endX;
    private int endY;
    private BarrierType barrierType;

    public Barrier(String barrierString) {
        String[] coords = barrierString.split("-");
        this.startX = Integer.parseInt(coords[0].substring(1, 2));
        this.startY = Integer.parseInt(coords[0].substring(3, 4));
        this.endX = Integer.parseInt(coords[1].substring(1, 2));
        this.endY = Integer.parseInt(coords[1].substring(3, 4));
        if (startX > endX) {
            int tmp = startX;
            startX = endX;
            endX = tmp;
        }
        if (startY > endY) {
            int tmp = startY;
            startY = endY;
            endY = tmp;
        }
        if (startX == endX) {
            this.barrierType = BarrierType.VERTICAL;
        } else {
            this.barrierType = BarrierType.HORIZONTAL;
        }
    }

    public boolean willHitBarrier(int currentX, int currentY, String direction) {
        switch (direction) {
            case "ea":
                return willHitBarrierWhenMovingHorizontally(currentX, currentY, currentX + 1);
            case "we":
                return willHitBarrierWhenMovingHorizontally(currentX, currentY, currentX - 1);
            case "no":
                return willHitBarrierWhenMovingVertically(currentX, currentY,  currentY + 1);
            case "so":
                return willHitBarrierWhenMovingVertically(currentX, currentY,  currentY - 1);
            default:
                throw new IllegalArgumentException("Invalid direction String");
        }
    }

    /**
     * Checks whether the MiningMachine will hit this barrier when moving north or south
     * @param currentX current X position of the MiningMachine
     * @param currentY current Y position of the MiningMachine
     * @param nextY next Y position of the MiningMachine
     * @return true if it will hit the Barrier, otherwise false
     */
    private boolean willHitBarrierWhenMovingVertically(int currentX, int currentY, int nextY) {
        if (barrierType.isVertical()) return false;

        if (currentX < startX || currentX >= endX) return false;

        return (nextY < startY && currentY >= startY) || (nextY >= startY && currentY < startY);
    }

    /**
     * Checks whether the MiningMachine will hit this barrier when moving east or west
     * @param currentX current X position of the MiningMachine
     * @param currentY current Y position of the MiningMachine
     * @param nextX next X position of the MiningMachine
     * @return true if it will hit the Barrier, otherwise false
     */
    private boolean willHitBarrierWhenMovingHorizontally(int currentX, int currentY, int nextX) {
        if (barrierType.isHorizontal()) return false;

        if (currentY < startY || currentY >= endY) return false;

        return (nextX < startX && currentX >= startX) || (nextX >= startX && currentX < startX);
    }
}
package thkoeln.st.st2praktikum.exercise;

import lombok.Getter;

@Getter
public enum BarrierType {
    HORIZONTAL(true, false), VERTICAL(false, true);

    private final boolean isHorizontal;
    private final boolean isVertical;

    BarrierType(boolean isHorizontal, boolean isVertical){
        this.isHorizontal = isHorizontal;
        this.isVertical = isVertical;
    }

}

package thkoeln.st.st2praktikum.exercise;

import java.util.ArrayList;
import java.util.List;

public class Exercise0 implements GoAble {
    private int x = 4;
    private int y = 0;
    private List<Barrier> barriers = new ArrayList<Barrier>();
    private int fieldWidth = 11;
    private int fieldHeight = 8;

    public Exercise0() {
        // Add the barriers to the list
        barriers.add(new Barrier("(1,0)-(1,6)"));
        barriers.add(new Barrier("(1,6)-(4,6)"));
        barriers.add(new Barrier("(5,6)-(7,6)"));
        barriers.add(new Barrier("(7,1)-(7,6)"));
    }

    @Override
    public String go(String goCommandString) {
        String[] goCommand = goCommandString.replaceAll("[\\[\\]]", "").split(",");
        String direction = goCommand[0];
        int steps = Integer.parseInt(goCommand[1]);

        for (int i = 0; i < steps; i++) {
            int nextX = x;
            int nextY = y;

            switch (direction) {
                case "no":
                    nextY += 1;
                    break;
                case "so":
                    nextY -= 1;
                    break;
                case "we":
                    nextX -= 1;
                    break;
                case "ea":
                    nextX += 1;
                    break;
                default:
                    throw new IllegalArgumentException("Invalid direction String");
            }

            // Check if the mining machine goes out of bounds
            if (nextX < 0 || nextX >= fieldWidth || nextY < 0 || nextY >= fieldHeight) {
                // Mining machine goes out of bounds, stay at current position
                return "(" + x + "," + y + ")";
            }

            // Check if the next step hits a barrier
            for (Barrier barrier : barriers) {
                if (barrier.willHitBarrier(x, y, direction)) {
                    // Barrier will be hit, stay at current position
                    return "(" + x + "," + y + ")";
                }
            }

            // Move to the next position
            x = nextX;
            y = nextY;

        }

        return "(" + x + "," + y + ")";
    }

}
package thkoeln.st.st2praktikum.exercise;

public interface GoAble {
    String go(String goCommandString);
}
