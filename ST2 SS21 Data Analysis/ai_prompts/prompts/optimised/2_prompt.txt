You have the task to steer a maintenance droid across a spaceship deck with obstacles. The spaceship deck is square-shaped. The spaceship deck is modelled as a system of cells. A spaceship deck is divided into cells by an x and y-coordinate system, each starting at 0. A cell is identified by the coordinate associated with its lower left corner. The room contains obstacles, running only horizontally or vertically. The droid exists and moves within the grid cells, but the obstacles run along the grid lines. The boundaries of the spaceship deck cannot be passed - essentially they also are a kind of barrier. The device can be moved by a simple set of commands. A command is enclosed by square brackets, and has two parts: a direction and the number of steps. A maintenance droid can only be moved horizontally or vertically, not diagonally. If the droid initially is located in the cell (1,2) and the command is [no,2], the maintenance droid moves 2 cells up, and is then positioned on (1,4). The direction is either no (north), ea (east), so (south), or we (west). If the maintenance droid meets a obstacle or a spaceship deck boundary, then it moves only as many steps as possible, and then stops. 

In my map of the space the device starts at (0, 2). The room is 12 cells wide and 9 cells high. The coordinate system begins at 0. Along with the barriers at the room boundaries, there are four barriers, fully along the length between the co-ordinates: (3,0)-(3,3) and (5,0)-(5,4) and (4,5)-(7,5) and (7,5)-(7,9).

Some examples, given the obstacles defined above: the droid starts at (0, 2). If the command is [ea,3] the droid moves 2 cells to the right and then stops at (2, 2), because it is blocked by an obstacle. If the droid started at (6, 3) and the command is [we,3] then the device moves 1 cell to the left and stops at (5, 3) because it is blocked by an obstacle. If the device started at (6,3) and the command is [no,5] then the device moves 1 cell up and stops at (6, 4) because it is blocked by an obstacle. If the device starts at (4, 7) and the command is [so,7] then the droid moves 2 cells down and then stops at (4, 5) because it is blocked by an obstacle.

Use this information to write the Java class thkoeln.st.st2praktikum.exercise.Exercise0, using my map to define the starting location of the droid (0, 2), the size of the spaceship deck (12 cells wide and 9 cells high), and the locations of the obstacles (fully between the co-ordinates: (3,0)-(3,3) and (5,0)-(5,4) and (4,5)-(7,5) and (7,5)-(7,9)). Remember that the obstacles lie along the grid lines, not the grid cells. The class has to implement the interface: java public interface Moveable { String moveTo(String moveCommandString); } The code must be able to parse the input command string moveCommandString with the exact format "[no,2]". The expected return value is the coordinate of the location of the droid afterwards, e.g. "(2,4)".